<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <CourseraCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Learn algorithms through solving programming challenges in the PyCharm IDE! This professional IDE will help you to format and structure your code, as well as test and debug it. &#10;&#10;This course powers our popular &lt;a href=&quot;https://www.coursera.org/specializations/data-structures-algorithms&quot;&gt;Data Structures and Algorithms online specialization on Coursera&lt;/a&gt;. We encourage you to sign up for a session and learn this material while interacting with thousands of other talented students from around the world." />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="Algorithmic Toolbox" />
          <option name="submitManually" value="true" />
          <option name="updateDate" value="0" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Programming Challenges" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Welcome!&#10;&#10;This course powers our popular&#10;&lt;a href=&quot;https://www.coursera.org/specializations/data-structures-algorithms&quot;&gt;Data Structures and Algorithms online specialization on Coursera&lt;/a&gt;.&#10;We encourage you to sign up for a session and learn&#10;this material while interacting with thousands of&#10;other talented students from around the world.&#10;&#10;A particular goal of this framework is to help you to learn how to&#10;write efficient, reliable, and compact Python code. The PyCharm IDE&#10;will make the learning process smooth and enjoyable: it will help&#10;you with testing and debugging as well as structuring and formatting your code.&#10;&#10;The assumed pipeline is the following.&#10;For each programming challenge in this course:&#10;&lt;ol&gt;&#10;&lt;li&gt;Design an algorithm, prove that it is correct and has the expected asymptotic behavior.&lt;/li&gt;&#10;&lt;li&gt;Implement it in Python here, in PyCharm Edu.&lt;/li&gt;&#10;&lt;li&gt;Implement unit tests and stress tests for your solution. If a bug is found, fix it and test again.&lt;/li&gt;&#10;&lt;li&gt;By pressing the play button on the right pane, check your solution against a few test cases.&lt;/li&gt;&#10;&lt;li&gt;Finally, when you are happy with your implementation, submit to Coursera.&#10;    This will test your solution against dozens of carefully selected tests cases.&#10;    For each test case, the autograding system checks whether your solution is fast enough and&#10;    computes the right result.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;Enjoy!&#10;&#10;# Getting Started&#10;&#10;1. We assume that you are already familiar&#10;with basic Python programming. To refresh&#10;your Python skills, you may want to take an&#10;Introductory Python course here&#10;(File -&gt; Browse Courses).&#10;&#10;2. To get familiar with PyCharm Edu, &#10;take a look at the &#10;&lt;a href=&quot;https://www.jetbrains.com/help/pycharm-edu/student-s-guide.html&quot;&gt;Start Guide&lt;/a&gt;.&#10;&#10;3. The &lt;a href=&quot;http://bit.ly/2ETCmR6&quot;&gt;companion MOOCBook&lt;/a&gt; contains&#10;detailed statements of all 30 programming challenges&#10;from this course as well as good programming practices&#10;and solutions for selected problems.&#10;&#10;# Programming Challenge: Sum of Two Digits&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;## Implementing a Solution&#10;Implement the `compute_sum` function that takes two digits (that is,&#10;integers in the range from 0 to 9) and returns the sum of these two digits.&#10;&#10;We start from this ridiculously simple problem to show you the&#10;pipeline of designing an algorithm,&#10;implementing it, testing and debugging your program, and&#10;submitting it to the grading system.&#10;&#10;For this trivial problem, we will skip “Designing an algorithm” and &quot;Implementing&quot;&#10;steps and will move to testing.&#10;&#10;## Testing&#10;Switch to the file `sum_of_two_digits_unit_tests.py`.&#10;It contains unit tests for your implementation. If&#10;you haven't heard about unit testing before, we&#10;encourage you to read about it in &#10;&lt;a href=&quot;https://docs.python.org/3/library/unittest.html&quot;&gt;this official &#10;doc article&lt;/a&gt;&#10;or to take a short course here, in PyCharm Edu&#10;(through File -&gt; Browse Courses).&#10;&#10;For this starting programming challenge, we've already&#10;implemented everything for you. Press the green &quot;Execute&quot;&#10;button in the top left corner of the source file to run the&#10;tests and make sure that all tests pass successfully.&#10;&#10;In this challenge, the space of all possible inputs&#10;is so small that it is possible to check just all possible&#10;test cases: the `test_all_inputs` method goes through all&#10;pairs $0 \le a, b \le 9$.&#10;&#10;## Checking Your Implementation&#10;When all unit tests pass successfully, press the &quot;Check task&quot;&#10;button in the top part of this pane.&#10;&#10;## Submitting to Coursera&#10;When the check is successful, submit the `sum_of_two_digits.py`&#10;file to Coursera.&#10;&#10;&lt;div class='hint'&gt;Just type &quot;first_digit + second_digit&quot;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ZtG0y/a-plus-b/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Sum of Two Digits" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="iVBORw0KGgoAAAANSUhEUgAAAm8AAAIsCAMAAACTJL54AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAQlBMVEX///+SkpKSkpKSkpKSkpJEZ/xEZ/xEZxlEZ51EZ9JEZ7pEZ/xEZ3lEZ/xEZ+hEZ09EZ/xEZ/xEZ/ySkpJEZ/z///9SIN04AAAAE3RSTlMAiLuZRCJmiLvdzESqEe6ZM1V3XtKziwAAAAFiS0dEAIgFHUgAAAAJcEhZcwAAAMgAAADIAGP6560AAAAHdElNRQfjBRwXNSF5GsPGAAAJqElEQVR42u3d63aqOACAUc8FEkAuMn3/Zx3bWmsrtmoh8ej+fnatGTy4JQkCrlZz9Ou3dNSv1UL9/k866jdv4k288aYb9/bnl7Trz/Le/q6kXX95E2/ijTfxJt54E2/iTbzxJt7EG2/iTbxJvIk38cabeBNvvIk38SbeeBNv4o038SbeeBNv4k288SbexBtv4k28iTfexJt44028iTfexJt4E2+8iTfxxpt4E2/ijTfxJt54E2/ijTfxJt7EG2/iTbzxJt7Em8SbeBNvvIk38cabeBNv4o038SbeeBNv4o038SbexBtv4k288SbexJt44028iTfexJt44028iTfxxpt4E2+8iTfxJt54E2/ijTfxJt54E2/iTbzxJt7EG2/iTbxJvIk38cabeBNvvIk38SbeeBNv4o038SbeeBNv4k288SbexBtv4k28iTfexJt44028iTfexJt4E2+8iTfxxpt4E2/ijTfxJt54E2/ijTfxJt7EG2/iTbzxJt7Em8SbeBNvvIk38cabeBNv4o038SbeeBNv4o038SbexBtv4k288SbexJt44028iTfexJt44028iTfxxpt4E2+8iTfxJt54E2/ijTfxJt54E2/iTbzxJt7EG2/iTbxJvIk38cabeBNvvIk38SbeeBNv4o038SbeeBNv4k288SbexBtv4k28iTfexJt44028iTfexJt4E2+8iTfxxpt4E2/ijTfxJt54E2/ijTfxJt7EG2/iTbzxJt7Em8SbeBNvvIk38cabeBNv4o038SbeeBNv4o038SbexBtv4u2iijLEWNUxhib9xpuwjnW13XbZ5vnXt81L3/6Nt3kq49N7XV8kfa9DdbDx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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="sum_of_two_digits.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="20" />
                                          <option name="offset" value="220" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="26" />
                                      <option name="offset" value="220" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="write your code here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="sum_of_two_digits.py" />
                                <option name="text" value="# python3 (this comment tells the grading system at Coursera to use python3 rather than python3)&#10;&#10;&#10;def sum_of_two_digits(first_digit, second_digit):&#10;    assert 0 &lt;= first_digit &lt;= 9 and 0 &lt;= second_digit &lt;= 9&#10;    return write your code here&#10;&#10;&#10;if __name__ == '__main__':&#10;    a, b = map(int, input().split())&#10;    print(sum_of_two_digits(a, b))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="sum_of_two_digits_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="sum_of_two_digits_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from itertools import product&#10;from sum_of_two_digits import sum_of_two_digits&#10;&#10;&#10;class TestSumOfTwoDigits(unittest.TestCase):&#10;    def test_all_inputs(self):&#10;        for first_digit, second_digit in product(range(10), repeat=2):&#10;            self.assertEqual(sum_of_two_digits(first_digit, second_digit), first_digit + second_digit)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from itertools import product&#10;from sum_of_two_digits import sum_of_two_digits&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;sum_of_two_digits_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for a, b in product(range(10), repeat=2):&#10;        if sum_of_two_digits(a, b) != a + b:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for a={}, b={}&quot;.format(a, b))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Pairwise Product&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given a list $A$ of non-negative integers, find&#10;the maximum product of two distinct elements (that is,&#10;the maximum value of $A[i] \cdot A[j]$ where $i \neq j$;&#10;note that it may be the case that $A[i]=A[j]$).&#10;The length of $A$ is at least 2 and at most $2 \cdot 10^5$,&#10;all elements are non-negative and do not exceed&#10;$2\cdot 10^5$.&#10;&#10;# Naive Algorithm&#10;&#10;The source file `maximum_pairwise_product.py`&#10;contains an implementation of a naive algorithm&#10;that just goes through all possible pairs. While it is&#10;clearly correct, it is too slow. To enusre this,&#10;make the following experiment. Add the following&#10;three lines to the end of the file:&#10;```&#10;n = 10&#10;A = [0] * n&#10;print(max_pairwise_product_naive(A))&#10;```&#10;This code creates a list $A$ of size&#10;$10$ filled with zeros. It then passes it to the&#10;function `max_pairwise_product_naive` and prints&#10;the result. To see the result, press the green&#10;Run button. It will print the result (0) in the&#10;Run area on blink of an eye. Now, change the value&#10;of $n$ from $10$ to $10^5$ by replacing `10` with&#10;`10**5` and run the resulting program again.&#10;You'll see that it hangs.&#10;&#10;# Fast Algorithm&#10;&#10;See the materials of the first week at Coursera or edX&#10;to implement a faster algorithm as `max_pairwise_product`&#10;function.&#10;&#10;# Testing&#10;&#10;After implementing the function `max_pairwise_product`,&#10;start testing your solution. For this, switch to the file&#10;`maximum_pairwise_product_unit_tests.py`. It contains&#10;several unit tests that ensure the correctness of&#10;your program. The function `test_small` checks your&#10;function against a few manually created tests.&#10;The function `test_stress` generates a few short&#10;lists and checks whether your function returns the same&#10;as the naive one. Finally, the function `test_large` checks&#10;your function against massive datasets: the first one&#10;is a list of size $2 \cdot 10^5$ filled in with 4's, the&#10;second one is a list $[0, 1, \ldots, 10^5-1]$.&#10;&#10;Add two more unit tests and run it. Ensure that all tests pass.&#10;&#10;&#10;# Checking Your Solution&#10;&#10;When all unit tests pass, check your solution by&#10;pressing the &quot;Check Task&quot; button.&#10;&#10;&#10;# Submitting to Coursera&#10;&#10;When the check is successfull,&#10;submit the source file to Coursera or edX.&#10;&#10;&lt;div class='hint'&gt;Use some small list for which you are able to compute the result by hand&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/d5xfz/maximum-pairwise-product/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Maximum Pairwise Product" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_pairwise_product.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="439" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="40" />
                                      <option name="offset" value="435" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_pairwise_product.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def max_pairwise_product_naive(numbers):&#10;    assert len(numbers) &gt;= 2&#10;    assert all(0 &lt;= x &lt;= 2 * 10 ** 5 for x in numbers)&#10;&#10;    product = 0&#10;&#10;    for i in range(len(numbers)):&#10;        for j in range(i + 1, len(numbers)):&#10;            product = max(product, numbers[i] * numbers[j])&#10;&#10;    return product&#10;&#10;&#10;def max_pairwise_product(numbers):&#10;    assert len(numbers) &gt;= 2&#10;    assert all(0 &lt;= x &lt;= 2 * 10 ** 5 for x in numbers)&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    n = int(input())&#10;    input_numbers = list(map(int, input().split()))&#10;    assert len(input_numbers) == n&#10;    print(max_pairwise_product(input_numbers))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_pairwise_product_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="401" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="393" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_pairwise_product_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from random import randint&#10;from maximum_pairwise_product import max_pairwise_product_naive, max_pairwise_product&#10;&#10;class TestMaxPairwiseProduct(unittest.TestCase):&#10;    def test_small(self):&#10;        self.assertEqual(max_pairwise_product([1, 2, 3]), 6)&#10;        self.assertEqual(max_pairwise_product([9, 3, 2]), 27)&#10;        self.assertEqual(max_pairwise_product([7, 3, 7, 2]), 49)&#10;        type here&#10;&#10;&#10;    def test_stress(self):&#10;        number_of_iterations = 10&#10;        array_size = 100&#10;        max_number = 2 * 10**5&#10;&#10;        for _ in range(number_of_iterations):&#10;            numbers = [randint(0, max_number) for _ in range(array_size)]&#10;            self.assertEqual(max_pairwise_product(list(numbers)), max_pairwise_product_naive(numbers))&#10;&#10;&#10;    def test_large(self):&#10;        self.assertEqual(max_pairwise_product([4] * (2 * 10**5)), 16)&#10;        self.assertEqual(max_pairwise_product([x for x in range(10**5)]), (10**5 - 1) * (10**5 - 2))&#10;        self.assertEqual(max_pairwise_product([1] * (2 * 10**5)), 1)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from maximum_pairwise_product import max_pairwise_product&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;maximum_pairwise_product_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    tests = [&#10;        ([1, 2], 2),&#10;        ([2, 1], 2),&#10;        ([3, 5], 15),&#10;        ([5, 3], 15),&#10;        ([7, 7], 49),&#10;        ([5, 1, 5], 25),&#10;        ([1, 5, 5], 25),&#10;        ([i + 1 for i in range(10**5)], (10**5 - 1) * (10 ** 5)),&#10;    ]&#10;&#10;    for array, answer in tests:&#10;        if max_pairwise_product(array) != answer:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for A={}&quot;.format(array))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Algorithmic Warm Up" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Fibonacci Number&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Fibonacci numbers are defined recursively: $F_0=0$, $F_1=1$,&#10;and $F_n=F_{n-1}+F_{n-2}$ for $n \ge 1$.&#10;This definition results in the recursive function `compute_fibonacci_number_naive`&#10;that you see on the left in the file `fibonacci_number.py`.&#10;&#10;# Running the Naive Solution&#10;Try to compute $F_{10}$ using this function.&#10;For this, comment out everything except for the&#10;implementation of the `fibonacci_number_naive` function&#10;and add the line&#10;```&#10;print(fibonacci_number_naive(10))&#10;```&#10;to the end of the file and press the green Run button&#10;at the top left corner of the Python file. You'll see that it will print the result (55) in the&#10;Run pane at the bottom in blink of an eye. Now, change 10 to 40 and press the Run button again. You'll see&#10;that the solution hangs and does not print anything. Stop it by pressing the red Stop button in the Run pane.&#10;&#10;Let's try to understand why our current solution hangs.&#10;To this end, let's add *debug printing* to the `fibonacci_number_naive` function:&#10;add the line&#10;```&#10;print(&quot;Compute F sub&quot;, n)&#10;```&#10;to the beginning of the function and run it again.&#10;You'll see a seemingly endless series of recursive calls in the Run pane:&#10;```&#10;Compute F sub 1&#10;Compute F sub 0&#10;Compute F sub 7&#10;Compute F sub 6&#10;Compute F sub 5&#10;Compute F sub 4&#10;Compute F sub 3&#10;Compute F sub 2&#10;Compute F sub 1&#10;Compute F sub 0&#10;Compute F sub 1&#10;Compute F sub 2&#10;Compute F sub 1&#10;Compute F sub 0&#10;Compute F sub 3&#10;```&#10;This output, in particular, reveals the reason why our&#10;current solution is so slow:&#10;*it computes the same thing again many times*.&#10;&#10;&#10;# Task&#10;&#10;## Implement an Efficient Solution&#10;Implement the `fibonacci_number` function.&#10;Make sure to avoid recomputing the same thing again.&#10;&#10;&#10;## Test Your Solution&#10;Now, switch to the file `fibonacci_number_unit_tests.py`.&#10;It consists of several unit tests. The function `test_small`&#10;checks that your implementation computes the same as the naive one&#10;for all $0 \le n &lt; 8$ (this is affordable,&#10;since for $n &lt; 8$ the&#10;`fibonacci_number_naive` is fast enough).&#10;The function `test_large`&#10;checks that your implementation computes $F_{30}$, $F_{35}$, and&#10;$F_{40}$ correctly.&#10;&#10;Enter the value of $F_{35}$ to the placeholder and&#10;run the unit tests by pressing the green Execute button.&#10;Make sure that all tests pass.&#10;&#10;## Check Your Solution&#10;Finally, press the &quot;Check Task&quot; button in the&#10;Task Description pane. If everything is OK,&#10;submit to Coursera/edX.&#10;&#10;&lt;div class='hint'&gt;Compute the value of the 35-th Fibonacci number and add it here. This way, the function test_large will also check that your implementation computes $F_{35}$ correctly.&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Fibonacci Number" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="fibonacci_number.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="230" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="105" />
                                      <option name="offset" value="230" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="fibonacci_number.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def fibonacci_number_naive(n):&#10;    assert 0 &lt;= n &lt;= 45&#10;&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    return fibonacci_number_naive(n - 1) + fibonacci_number_naive(n - 2)&#10;&#10;&#10;def fibonacci_number(n):&#10;    assert 0 &lt;= n &lt;= 45&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    print(fibonacci_number(input_n))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="fibonacci_number_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="334" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="334" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="fibonacci_number_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from fibonacci_number import fibonacci_number, fibonacci_number_naive&#10;&#10;&#10;class TestFibonacciNumber(unittest.TestCase):&#10;    def test_small(self):&#10;        for n in range(8):&#10;            self.assertEqual(fibonacci_number(n), fibonacci_number_naive(n))&#10;&#10;    def test_large(self):&#10;        for (n, Fn) in [(30, 832040), (35, type here), (40, 102334155)]:&#10;            self.assertEqual(fibonacci_number(n), Fn)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from fibonacci_number import fibonacci_number&#10;&#10;&#10;def fibonacci_number_reference(n):&#10;    assert 0 &lt;= n &lt;= 40&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    previous, current = 0, 1&#10;    for _ in range(n - 1):&#10;        previous, current = current, previous + current&#10;&#10;    return current&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;fibonacci_number_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for x in range(41):&#10;        if fibonacci_number(x) != fibonacci_number_reference(x):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(x))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Last Digit of Fibonacci Number&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Implement `last_digit_of_fibonacci_number` function&#10;that takes an integer $0 \le n \le 10^7$ and returns&#10;the last digit of $F_n$.&#10;&#10;As usual, after implementing a solution, do the&#10;following:&#10;* Switch to the unit tests file, add a few new&#10;tests to the already implemented ones, and run the&#10;tests.&#10;* If a bug is found, fix it and run the tests again.&#10;* Then, check your solution in PyCharm Edu.&#10;* Finally, uncomment the last few lines in the&#10;source file and submit the solution to Coursera or edX.&#10;&#10;Please follow the same steps for all the&#10;forthcoming programming challenges. For them, we will&#10;provide the challenge statement only.&#10;&#10;&lt;div class='hint'&gt;Recall that you need to compute just the last digit of a Fibonacci number. In order to speed up the computation, take every intermediate result modulo 10.&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Last Digit of Fibonacci Number" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="last_digit_of_fibonacci_number.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="303" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="148" />
                                      <option name="offset" value="311" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_fibonacci_number.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def last_digit_of_fibonacci_number_naive(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 7&#10;&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    return (last_digit_of_fibonacci_number_naive(n - 1) + last_digit_of_fibonacci_number_naive(n - 2)) % 10&#10;&#10;&#10;def last_digit_of_fibonacci_number(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 7&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    print(last_digit_of_fibonacci_number(input_n))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="last_digit_of_fibonacci_number_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="466" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="466" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_fibonacci_number_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from last_digit_of_fibonacci_number import last_digit_of_fibonacci_number, last_digit_of_fibonacci_number_naive&#10;&#10;&#10;class TestLastDigitOfFibonacciNumber(unittest.TestCase):&#10;    def test_small(self):&#10;        for n in range(20):&#10;            self.assertEqual(last_digit_of_fibonacci_number_naive(n),&#10;                             last_digit_of_fibonacci_number(n))&#10;&#10;    def test_large(self):&#10;        for (n, last_digit) in [(100, 5), (139, 1), (91239, 6), type here]:&#10;            self.assertEqual(last_digit_of_fibonacci_number(n), last_digit)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from last_digit_of_fibonacci_number import last_digit_of_fibonacci_number&#10;&#10;&#10;def fibonacci_number_last_digit_reference(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 6&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    previous, current = 0, 1&#10;    for _ in range(n - 1):&#10;        previous, current = current, (previous + current) % 10&#10;&#10;    return current&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;last_digit_of_fibonacci_number_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for m in [2, 3, 239, 240, 1000, 9999, 10**6]:&#10;        if last_digit_of_fibonacci_number(m) != fibonacci_number_last_digit_reference(m):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(m))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Greatest Common Divisor&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;The greatest common divisor &#10;$\operatorname{GCD}(a,b)$ of two positive &#10;integers $a$ and $b$ is the largest integer $d$ &#10;that divides both $a$ and $b$. The solution &#10;of the Greatest Common Divisor Problem was &#10;first described (but not discovered!) by &#10;the Greek mathematician Euclid twenty &#10;three centuries ago. But the name of &#10;a mathematician who discovered this algorithm, &#10;a century before Euclid described it, remains &#10;unknown. Centuries later, Euclid's algorithm &#10;was re-discovered by Indian and Chinese astronomers. &#10;Now, efficient algorithm for computing the greatest &#10;common divisor is an important ingredient of modern &#10;cryptographic algorithms. &#10;&#10;Your goal is to implement Euclid's algorithm for computing $\operatorname{GCD}$. &#10;&#10;Implement a function that computes the greatest&#10;common divisor of two integers&#10;$1 \le a, b \le 2 \cdot 10^9$.&#10;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="3" />
                      <option name="name" value="Greatest Common Divisor" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="gcd.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="313" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="69" />
                                      <option name="offset" value="313" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="gcd.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def gcd_naive(a, b):&#10;    assert 1 &lt;= a &lt;= 2 * 10 ** 9 and 1 &lt;= b &lt;= 2 * 10 ** 9&#10;&#10;    for divisor in range(min(a, b), 0, -1):&#10;        if a % divisor == 0 and b % divisor == 0:&#10;            return divisor&#10;&#10;    assert False&#10;&#10;&#10;def gcd(a, b):&#10;    assert 0 &lt;= a &lt;= 2 * 10 ** 9 and 0 &lt;= b &lt;= 2 * 10 ** 9&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_a, input_b = map(int, input().split())&#10;    print(gcd(input_a, input_b))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="gcd_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="148" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="148" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="298" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="14" />
                                      <option name="offset" value="295" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="gcd_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from gcd import gcd, gcd_naive&#10;&#10;&#10;class TestGCD(unittest.TestCase):&#10;    def test_small(self):&#10;        for (a, b) in [(1, 1), (2, 6), type here]:&#10;            self.assertEqual(gcd(a, b), gcd_naive(a, b))&#10;&#10;    def test_large(self):&#10;        for (a, b, d) in [(28851538, 1183019, 17657), type here]:&#10;            self.assertEqual(gcd(a, b), d)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="import math&#10;from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from gcd import gcd&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;gcd_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for (a, b) in [(2, 3), (10**8, 10**5 - 1), (10**8, 10**9)]:&#10;        if gcd(a, b) != math.gcd(a, b):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for a={}, b={}&quot;.format(a, b))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Least Common Multiple&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;The least common multiple &#10;$\operatorname{LCM}(a,b)$ of two positive &#10;integers $a$ and $b$ is the smallest &#10;integer $m$ that is divisible by both $a$ and $b$. &#10;&#10;How $\operatorname{LCM}(a,b)$ is related to &#10;$\operatorname{GCD}(a,b)$?&#10;&#10;Compute the least common multiple&#10;of two integers&#10;$1 \le a, b \le 2 \cdot 10^9$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="4" />
                      <option name="name" value="Least Common Multiple" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="lcm.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="292" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="27" />
                                      <option name="offset" value="438" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="lcm.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def lcm_naive(a, b):&#10;    assert 1 &lt;= a &lt;= 2 * 10 ** 9 and 1 &lt;= b &lt;= 2 * 10 ** 9&#10;&#10;    multiple = max(a, b)&#10;    while multiple % a != 0 or multiple % b != 0:&#10;        multiple += 1&#10;&#10;    return multiple&#10;&#10;&#10;def lcm(a, b):&#10;    assert 1 &lt;= a &lt;= 2 * 10 ** 9 and 1 &lt;= b &lt;= 2 * 10 ** 9&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_a, input_b = map(int, input().split())&#10;    print(lcm(input_a, input_b))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcm_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="337" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="38" />
                                      <option name="offset" value="337" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="lcm_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from itertools import product&#10;from lcm import lcm, lcm_naive&#10;&#10;&#10;class TestLCM(unittest.TestCase):&#10;    def test_small(self):&#10;        for (a, b) in product(range(1, 15), repeat=2):&#10;            self.assertEqual(lcm(a, b), lcm_naive(a, b))&#10;&#10;    def test_large(self):&#10;        for (a, b, m) in [(28851538, 1183019, 1933053046), type here]:&#10;            self.assertEqual(lcm(a, b), m)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="import math&#10;from random import randint&#10;from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from lcm import lcm&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;lcm_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for _ in range(10):&#10;        a, b = randint(1, 10 ** 18), randint(1, 10 ** 18)&#10;        if lcm(a, b) != a * b // math.gcd(a, b):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for a={}, b={}&quot;.format(a, b))&#10;            break&#10;&#10;        c = randint(1, 10 ** 9)&#10;        a, b = randint(1, 10 ** 9) * c, randint(1, 10 ** 9) * c&#10;        if lcm(a, b) != a * b // math.gcd(a, b):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for a={}, b={}&quot;.format(a, b))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Fibonacci Number Again&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given two integers $0 \le n \le 10^{18}$ and&#10;$2 \le m \le 10^3$,&#10;compute the $n$-th Fibonacci number modulo $m$.&#10;&#10;In this problem, $n$ may be so huge that an algorithm looping for $n$ iterations will be too slow. Therefore we need to avoid such a loop.&#10;To get an idea how to solve this problem without going through all Fibonacci numbers &#10;$F_i$ for $i$ from $0$ to $n$, &#10;take a look at the table below:&#10;&#10;&lt;center&gt;&lt;img src=&quot;table1.png&quot;&gt;&lt;/center&gt;&#10;&#10;Do you see any interesting properties of the last two rows in the table above?&#10;&#10;Both these sequences are periodic! For $m=2$, the period is $0 1 1$ and has length $3$, while for $m=3$ the period is $0 1 1 2 0 2 2 1$ and has length $8$. &#10;&#10;&lt;center&gt;&lt;img src=&quot;table2.png&quot;&gt;&lt;/center&gt;&#10;&#10;Therefore, to compute, say, $F_{2015} \bmod{3}$ we just need to find the remainder of $2015$ when divided by $8$. Since $2015=251 \cdot 8 + 7$, we conclude that $F_{2015} \bmod{3} = F_{7} \bmod{3}=1$.&#10;&#10;It turns out that for any integer $m \ge 2$, &#10;the sequence $F_n \bmod{m}$ is periodic. &#10;The period always starts with $0 1$ and is &#10;known as *Pisano period* &#10;(Pisano is another name of Fibonacci).&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="5" />
                      <option name="name" value="Fibonacci Number Again" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="fibonacci_number_again.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="369" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="235" />
                                      <option name="offset" value="580" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="fibonacci_number_again.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def fibonacci_number_again_naive(n, m):&#10;    assert 0 &lt;= n &lt;= 10 ** 18 and 2 &lt;= m &lt;= 10 ** 3&#10;&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    previous, current = 0, 1&#10;    for _ in range(n - 1):&#10;        previous, current = current, (previous + current) % m&#10;&#10;    return current&#10;&#10;&#10;def fibonacci_number_again(n, m):&#10;    assert 0 &lt;= n &lt;= 10 ** 18 and 2 &lt;= m &lt;= 10 ** 3&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n, input_m = map(int, input().split())&#10;    print(fibonacci_number_again(input_n, input_m))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="fibonacci_number_again_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="456" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="17" />
                                      <option name="offset" value="456" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="fibonacci_number_again_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from itertools import product&#10;from fibonacci_number_again import fibonacci_number_again, fibonacci_number_again_naive&#10;&#10;&#10;class TestFibonacciNumberAgain(unittest.TestCase):&#10;    def test_small(self):&#10;        for n, m in product(range(2, 15), repeat=2):&#10;            self.assertEqual(fibonacci_number_again(n, m), fibonacci_number_again_naive(n, m))&#10;&#10;    def test_large(self):&#10;        for (n, m, r) in [(115, 1000, 885), (2816213588, 239, 151), type here]:&#10;            self.assertEqual(fibonacci_number_again(n, m), r)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="table1.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="table1.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="table2.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="table2.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from fibonacci_number_again import fibonacci_number_again&#10;&#10;&#10;def pisano_period(m):&#10;    current, next = 0, 1&#10;    period = 0&#10;&#10;    while True:&#10;        current, next = next, (current + next) % m&#10;        period += 1&#10;        if current == 0 and next == 1:&#10;            return period&#10;&#10;&#10;def fib_mod(n, m):&#10;    current, next = 0, 1&#10;    for _ in range(n):&#10;        current, next = next, (current + next) % m&#10;&#10;    return current&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;fibonacci_number_again_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for (n, m) in [(7, 239), (239, 7), (10 ** 18, 239)]:&#10;        if fibonacci_number_again(n, m) != fib_mod(n % pisano_period(m), m):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(m))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Last Digit of the Sum of Fibonacci Numbers&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given $0 \le n \le 10^{18}$,&#10;compute the last digit of $$F_0+F_1+\dotsb+F_n.$$&#10;&#10;Since the brute force approach for this problem is too slow, try to come up with a formula for $F_0+F_1+F_2+\dotsb+F_n$. Play with small values of $n$ to get an insight and use a solution for the previous problem afterwards.&#10;&#10;&lt;div class='hint'&gt;&#10;A detailed solution for this programming challenge is covered in the &lt;a href=&quot;http://bit.ly/2MvJBF9&quot;&gt;companion MOOCBook&lt;/a&gt;. But we strongly encourage you to do your best to solve the challenge yourself before looking into the book! There are at least three good reasons for this.&#10;&lt;ul&gt;&#10;&lt;li&gt;By solving this challenge, you practice solving algorithmic problems similar to those given at technical interviews.&lt;/li&gt;&#10;&lt;li&gt;The satisfaction and self confidence that you get when passing the grader is priceless =)&lt;/li&gt;&#10;&lt;li&gt;Even if you fail to pass the grader yourself, the time will not be lost as you will better understand the solution from the book and better appreciate the beauty of the underlying ideas.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="6" />
                      <option name="name" value="Last Digit of the Sum of Fibonacci Numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="last_digit_of_the_sum_of_fibonacci_numbers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="470" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="202" />
                                      <option name="offset" value="470" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_the_sum_of_fibonacci_numbers.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def last_digit_of_the_sum_of_fibonacci_numbers_naive(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 18&#10;&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    fibonacci_numbers = [0] * (n + 1)&#10;    fibonacci_numbers[0] = 0&#10;    fibonacci_numbers[1] = 1&#10;    for i in range(2, n + 1):&#10;        fibonacci_numbers[i] = fibonacci_numbers[i - 2] + fibonacci_numbers[i - 1]&#10;&#10;    return sum(fibonacci_numbers) % 10&#10;&#10;&#10;def last_digit_of_the_sum_of_fibonacci_numbers(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 18&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    print(last_digit_of_the_sum_of_fibonacci_numbers(input_n))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="last_digit_of_the_sum_of_fibonacci_numbers_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="513" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="3" />
                                      <option name="offset" value="513" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_the_sum_of_fibonacci_numbers_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from last_digit_of_the_sum_of_fibonacci_numbers import last_digit_of_the_sum_of_fibonacci_numbers, last_digit_of_the_sum_of_fibonacci_numbers_naive&#10;&#10;&#10;class TestLastDigitOfTheSumOfFibonacciNumbers(unittest.TestCase):&#10;    def test_small(self):&#10;        for n in range(20):&#10;            self.assertEqual(last_digit_of_the_sum_of_fibonacci_numbers(n),&#10;                             last_digit_of_the_sum_of_fibonacci_numbers_naive(n))&#10;&#10;    def test_large(self):&#10;        for (n, last_digit) in [(100, 5), type here]:&#10;            self.assertEqual(last_digit_of_the_sum_of_fibonacci_numbers(n), last_digit)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from last_digit_of_the_sum_of_fibonacci_numbers import last_digit_of_the_sum_of_fibonacci_numbers&#10;&#10;&#10;def fibonacci_sum_last_digit(n):&#10;    n = (n + 2) % 60&#10;&#10;    prev, cur = 0, 1&#10;    for _ in range(n):&#10;        prev, cur = cur, (prev + cur) % 10&#10;&#10;    return (prev + 9) % 10&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;last_digit_of_the_sum_of_fibonacci_numbers_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for n in [2, 3, 239, 240, 1000, 9999, 10 ** 17]:&#10;        if last_digit_of_the_sum_of_fibonacci_numbers(n) != fibonacci_sum_last_digit(n):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(n))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Last Digit of the Sum of Fibonacci Numbers Again&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given two integers $0 \le m \le n \le 10^{18}$,&#10;compute the last digit of $$F_m+F_{m+1}+\dotsb+F_n.$$&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="7" />
                      <option name="name" value="Last Digit of the Sum of Fibonacci Numbers Again" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="last_digit_of_the_sum_of_fibonacci_numbers_again.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="608" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="150" />
                                      <option name="offset" value="1021" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_the_sum_of_fibonacci_numbers_again.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def last_digit_of_the_sum_of_fibonacci_numbers_again_naive(from_index, to_index):&#10;    assert 0 &lt;= from_index &lt;= to_index &lt;= 10 ** 18&#10;&#10;    if to_index == 0:&#10;        return 0&#10;&#10;    fibonacci_numbers = [0] * (to_index + 1)&#10;    fibonacci_numbers[0] = 0&#10;    fibonacci_numbers[1] = 1&#10;    for i in range(2, to_index + 1):&#10;        fibonacci_numbers[i] = fibonacci_numbers[i - 2] + fibonacci_numbers[i - 1]&#10;&#10;    return sum(fibonacci_numbers[from_index:to_index + 1]) % 10&#10;&#10;&#10;def last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index):&#10;    assert 0 &lt;= from_index &lt;= to_index &lt;= 10 ** 18&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_from, input_to = map(int, input().split())&#10;    print(last_digit_of_the_sum_of_fibonacci_numbers_again(input_from, input_to))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="last_digit_of_the_sum_of_fibonacci_numbers_again_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="904" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="23" />
                                      <option name="offset" value="904" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_the_sum_of_fibonacci_numbers_again_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from itertools import combinations&#10;from last_digit_of_the_sum_of_fibonacci_numbers_again import last_digit_of_the_sum_of_fibonacci_numbers_again, \&#10;    last_digit_of_the_sum_of_fibonacci_numbers_again_naive&#10;&#10;&#10;class TestLastDigitOfTheSumOfFibonacciNumbersAgain(unittest.TestCase):&#10;    def test_small(self):&#10;        for from_index, to_index in combinations(range(2, 15), 2):&#10;            self.assertEqual(last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index),&#10;                             last_digit_of_the_sum_of_fibonacci_numbers_again_naive(from_index, to_index))&#10;&#10;    def test_large(self):&#10;        for (from_index, to_index, last_digit) in [(3, 7, 1), (10, 10, 5), (100, 200, 0),&#10;                                                   (17, 1700, 7),&#10;                                                   (19, 10000000000, 1),&#10;                                                   type here]:&#10;            self.assertEqual(last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index), last_digit)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from last_digit_of_the_sum_of_fibonacci_numbers_again import last_digit_of_the_sum_of_fibonacci_numbers_again&#10;&#10;&#10;def fibonacci_sum_last_digit(n):&#10;    n = n % 60&#10;&#10;    prev, cur = 0, 1&#10;    for _ in range(n):&#10;        prev, cur = cur, (prev + cur) % 10&#10;&#10;    return (prev + 9) % 10&#10;&#10;def reference(from_index, to_index):&#10;    return (20 + fibonacci_sum_last_digit(to_index + 2) - fibonacci_sum_last_digit(from_index + 1)) % 10&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;last_digit_of_the_sum_of_fibonacci_numbers_again_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for (from_index, to_index) in [(1, 2), (2, 239), (1, 10 ** 10), (10 ** 10, 10 ** 13)]:&#10;        assert from_index &lt;= to_index&#10;        if last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index) != reference(from_index, to_index):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for m={}, n={}: {} {}&quot;.format(from_index, to_index,&#10;                                                               last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index),&#10;                                                               reference(from_index, to_index)))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Last Digit of the Sum of Squares of Fibonacci Numbers&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given $0 \le n \le 10^{18}$,&#10;compute the last digit of $$F_0^2+F_1^2+\dotsb+F_n^2.$$&#10;&#10;Since the brute force search algorithm for this problem is too slow ($n$ may be as large as $10^{18}$), we need to come up with a simple formula for $F_0^2+F_1^2+\dotsb+F_n^2$. The figure above represents the sum $F_1^2+F_2^2+F_3^2+F_4^2+F_5^2$ as the area of a rectangle  with vertical side $F_5=5$ and horizontal side $F_5+F_4=3+5=F_6$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="8" />
                      <option name="name" value="Last Digit of the Sum of Squares of Fibonacci Numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="last_digit_of_the_sum_of_squares_of_fibonacci_numbers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="510" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="141" />
                                      <option name="offset" value="764" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_the_sum_of_squares_of_fibonacci_numbers.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def last_digit_of_the_sum_of_squares_of_fibonacci_numbers_naive(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 18&#10;&#10;    if n &lt;= 1:&#10;        return n&#10;&#10;    fibonacci_numbers = [0] * (n + 1)&#10;    fibonacci_numbers[0] = 0&#10;    fibonacci_numbers[1] = 1&#10;    for i in range(2, n + 1):&#10;        fibonacci_numbers[i] = fibonacci_numbers[i - 2] + fibonacci_numbers[i - 1]&#10;&#10;    return sum([f ** 2 for f in fibonacci_numbers]) % 10&#10;&#10;&#10;def last_digit_of_the_sum_of_squares_of_fibonacci_numbers(n):&#10;    assert 0 &lt;= n &lt;= 10 ** 18&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    print(last_digit_of_the_sum_of_squares_of_fibonacci_numbers(input_n))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="last_digit_of_the_sum_of_squares_of_fibonacci_numbers_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="593" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="14" />
                                      <option name="offset" value="593" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="last_digit_of_the_sum_of_squares_of_fibonacci_numbers_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from last_digit_of_the_sum_of_squares_of_fibonacci_numbers import last_digit_of_the_sum_of_squares_of_fibonacci_numbers, last_digit_of_the_sum_of_squares_of_fibonacci_numbers_naive&#10;&#10;&#10;class TestLastDigitOfTheSumOfSquaresOfFibonacciNumbers(unittest.TestCase):&#10;    def test_small(self):&#10;        for n in range(20):&#10;            self.assertEqual(last_digit_of_the_sum_of_squares_of_fibonacci_numbers(n),&#10;                             last_digit_of_the_sum_of_squares_of_fibonacci_numbers_naive(n))&#10;&#10;    def test_large(self):&#10;        for (n, last_digit) in [(73, 1), (1234567890, 0), type here]:&#10;            self.assertEqual(last_digit_of_the_sum_of_squares_of_fibonacci_numbers(n), last_digit)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from last_digit_of_the_sum_of_squares_of_fibonacci_numbers import last_digit_of_the_sum_of_squares_of_fibonacci_numbers&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;last_digit_of_the_sum_of_fibonacci_numbers_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for n, d in [(73, 1)]:&#10;        if last_digit_of_the_sum_of_squares_of_fibonacci_numbers(n) != d:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(n))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="3" />
                <option name="name" value="Greedy Algorithms" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Money Change&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given an integer $1 \le money \le 10^3$, find&#10;the minimum number of coins with&#10;denominations 1, 5, and 10 that changes $money$.&#10;&#10;In this problem, you will implement a simple greedy algorithm used by cashiers all over the world. We assume that a cashier has unlimited number of coins of each denomination.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Money Change" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="money_change.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="74" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="140" />
                                      <option name="offset" value="74" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="money_change.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def money_change(money):&#10;    assert 0 &lt;= money &lt;= 10 ** 3&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_money = int(input())&#10;    print(money_change(input_money))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="money_change_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="187" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="187" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="money_change_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from money_change import money_change&#10;&#10;&#10;class TestSumOfTwoDigits(unittest.TestCase):&#10;    def test(self):&#10;        for (money, number_of_coins) in [(1, 1), (2, 2), (28, 6), type here]:&#10;            self.assertEqual(money_change(money), number_of_coins)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from money_change import money_change&#10;&#10;&#10;def reference(money):&#10;    assert 0 &lt;= money &lt;= 10 ** 3&#10;    return (money // 10) + ((money % 10) // 5) + (money % 5)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;money_change_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for m in range(10 ** 3):&#10;        if money_change(m) != reference(m):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for money={}&quot;.format(m))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Car Fueling&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Compute the minimum number of tank refills to get from one city to another.&#10;&#10;Assuming that the distance between the cities is $1 \le d \le 10^5$ miles,&#10;a car can travel at most $1 \le m \le 400$ miles on a full tank,&#10;and there are $1 \le n \le 300$ gas stations at distances&#10;$stop_1,stop_2,\dotsc,stop_n$ along the way,&#10;output the minimum number of refills needed.&#10;Assume that the car starts with a full tank.&#10;If it is not possible to reach the destination, output −1.&#10;The distances to gas stations satisfy the inequalities&#10;$$0 &lt; stop_1 &lt; stop_2 &lt; \dotsb &lt; stop_n &lt; d .$$&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Car Fueling" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="car_fueling.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="259" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="1145" />
                                      <option name="offset" value="253" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="car_fueling.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def compute_min_number_of_refills(d, m, stops):&#10;    assert 1 &lt;= d &lt;= 10 ** 5&#10;    assert 1 &lt;= m &lt;= 400&#10;    assert 1 &lt;= len(stops) &lt;= 300&#10;    assert 0 &lt; stops[0] and all(stops[i] &lt; stops[i + 1] for i in range(len(stops) - 1)) and stops[-1] &lt; d&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_d = int(input())&#10;    input_m = int(input())&#10;    input_n = int(input())&#10;    input_stops = list(map(int, input().split()))&#10;    assert len(input_stops) == input_n&#10;&#10;    print(compute_min_number_of_refills(input_d, input_m, input_stops))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="car_fueling_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="307" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="26" />
                                      <option name="offset" value="307" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="car_fueling_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from car_fueling import compute_min_number_of_refills&#10;&#10;&#10;class CarFueling(unittest.TestCase):&#10;    def test(self):&#10;        for (d, m, stops, answer) in [&#10;            (950, 400, [200, 375, 550, 750], 2),&#10;            (10, 3, [1, 2, 5, 9], -1),&#10;            (200, 250, [100, 150], 0),&#10;            type here&#10;        ]:&#10;            self.assertEqual(compute_min_number_of_refills(d, m, stops), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from car_fueling import compute_min_number_of_refills&#10;&#10;&#10;def reference(distance, tank, stops):&#10;    stops = [0] + stops + [distance]&#10;    num_refills, cur_refill = 0, 0&#10;    while cur_refill &lt;= len(stops) - 2:&#10;        last_refill = cur_refill&#10;        while cur_refill &lt;= len(stops) - 2 and stops[cur_refill + 1] - stops[last_refill] &lt;= tank:&#10;            cur_refill += 1&#10;        if cur_refill == last_refill:&#10;            return -1&#10;        if cur_refill &lt;= len(stops) - 2:&#10;            num_refills += 1&#10;&#10;    return num_refills&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;car_fueling_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for (d, m, stops) in [(500, 200, [100, 200, 300, 400])]:&#10;        if reference(d, m, stops) != compute_min_number_of_refills(d, m, stops):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for d={}, m={}, stops={}&quot;.format(d, m, stops))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Value of the Loot&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given the capacity of a backpack&#10;as well as the weights and per pound prices&#10;of $n$ different compounds, compute the&#10;maximum total price of items that&#10;fit into the backpack of the given capacity.&#10;&#10;A thief breaks into a spice shop and finds &#10;four pounds of saffron, three pounds of &#10;vanilla, and five pounds of cinnamon. His backpack &#10;fits at most nine pounds, therefore he cannot &#10;take everything. Assuming that the prices of &#10;saffron, vanilla, and cinnamon are &#10;5000, 200, and 10 per pound respectively, &#10;what is the most valuable loot in this case? &#10;If the thief takes $u_1$ pounds of saffron, &#10;$u_2$ pounds of vanilla, and $u_3$ pounds of cinnamon, &#10;the total price of the loot is &#10;$5\,000 \cdot u_1 + 200 \cdot u_2 + 10\cdot u_3$. &#10;The thief would like to maximize the value of this expression &#10;subject to the following constraints: &#10;$u_1 \le 4$, $u_2 \le 3$, $u_3 \le 5$, $u_1+u_2+u_3 \le 9$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="3" />
                      <option name="name" value="Maximum Value of the Loot" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_loot.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="318" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="600" />
                                      <option name="offset" value="318" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_loot.py" />
                                <option name="text" value="# python3&#10;&#10;from sys import stdin&#10;&#10;&#10;def maximum_loot_value(capacity, weights, prices):&#10;    assert 0 &lt;= capacity &lt;= 2 * 10 ** 6&#10;    assert len(weights) == len(prices)&#10;    assert 1 &lt;= len(weights) &lt;= 10 ** 3&#10;    assert all(0 &lt; w &lt;= 2 * 10 ** 6 for w in weights)&#10;    assert all(0 &lt;= p &lt;= 2 * 10 ** 6 for p in prices)&#10;&#10;    type here&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    data = list(map(int, stdin.read().split()))&#10;    n, input_capacity = data[0:2]&#10;    input_prices = data[2:(2 * n + 2):2]&#10;    input_weights = data[3:(2 * n + 2):2]&#10;    opt_value = maximum_loot_value(input_capacity, input_weights, input_prices)&#10;    print(&quot;{:.10f}&quot;.format(opt_value))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_loot_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="282" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="66" />
                                      <option name="offset" value="270" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_loot_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from maximum_loot import maximum_loot_value&#10;&#10;&#10;class TestMaximumLoot(unittest.TestCase):&#10;    def test(self):&#10;        for (capacity, weights, prices, answer) in [&#10;            (50, [20, 50, 30], [60, 100, 120], 180.0),&#10;            (10, [30], [500], 500/3),&#10;            type here&#10;        ]:&#10;            self.assertAlmostEqual(&#10;                maximum_loot_value(capacity, weights, prices),&#10;                answer,&#10;                delta=1e-03&#10;            )&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="import math&#10;from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from maximum_loot import maximum_loot_value&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;maximum_loot_unit_tests.py&quot;)&#10;&#10;    capacity = 12619&#10;    prices = [1347, 3494, 4257, 2741, 5711, 1562, 4116, 7471, 5833, 5989, 416, 5515, 2016, 2442, 3905, 3404, 9100, 6207, 1644, 2240, 5231, 1335, 673, 393, 6964, 5535, 6252, 89, 8073, 7775, 2053, 2226, 3563, 693, 9315, 5007, 1829, 9173, 8908, 2625, 5008, 7867, 7532, 7824, 435, 4403, 6028, 5586, 5289, 5541, 2234, 4306, 2299, 8374, 4343, 7359, 8939, 6261, 7100, 8205, 982, 6358, 3990, 570, 2200, 4519, 5251, 5209, 1239, 6045, 8871, 3897, 3756, 143, 7592, 7106, 4762, 1218, 2520, 5230, 1403, 8540, 3841, 6265, 908, 5881, 3717, 8574, 8037, 3239, 4442, 6518, 6564, 4138, 4041, 7052, 2738, 1924, 3326, 6057]&#10;    weights = [8254, 9484, 2934, 7521, 5054, 4629, 3648, 2124, 3039, 8661, 9916, 3740, 8876, 3138, 7136, 9804, 2398, 7744, 9785, 5399, 5351, 7907, 8511, 5524, 9136, 5894, 118, 5494, 87, 6297, 4437, 7777, 3549, 2956, 5477, 5542, 7290, 3291, 3019, 7229, 7430, 4829, 7996, 5708, 6681, 7195, 4428, 4293, 7030, 857, 5725, 6936, 7497, 3161, 7268, 9172, 2888, 6389, 7087, 4136, 147, 5791, 1100, 9317, 3256, 3074, 9226, 1652, 4033, 1004, 9477, 2245, 1859, 8303, 3872, 9526, 1678, 5881, 5272, 7923, 6299, 9238, 2039, 7903, 4283, 7011, 6773, 5543, 8704, 1786, 5498, 9117, 7320, 2403, 4692, 4411, 8, 272, 5588, 8540]&#10;&#10;    if math.fabs(maximum_loot_value(12619, weights, prices) - 66152.572) &gt; 1e-03:&#10;        failed(&quot;Wrong answer for capacity={}, weights={}, prices={}&quot;.format(&#10;            capacity, weights, prices&#10;        ))&#10;    else:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Advertisement Revenue&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;You have $n=3$ advertisement slots on your popular Internet page and &#10;you want to sell them to advertisers. They expect, respectively, &#10;${clicks}_1=10$, &#10;${clicks}_2=20$, and ${clicks}_3=30$ clicks per day. You found three advertisers &#10;willing to pay ${price}_1=2$, ${price}_2=3$, and ${price}_3=5$ per click. &#10;How would you pair the slots and advertisers? For example, the blue pairing &#10;gives a revenue of $10 \cdot 5 + 20 \cdot 2 + 30 \cdot 3 = 180$ dollars, while &#10;the black one results in revenue of $10\cdot 3 + 20 \cdot 5 + 30 \cdot 2=190$ dollars.&#10;&#10;&#10;Find the maximum dot product of two&#10;sequences of numbers.&#10;* Input: Two sequences of $n$ positive&#10;integers: $price_1,\dots,price_n$&#10;and $clicks_1,\dots,clicks_n$.&#10;* Output: The maximum value of&#10;$price_1 \cdot c_1 + \dots+price_n \cdot c_n$,&#10;where $c_1,\dots,c_n$ is a&#10;permutation of $clicks_1,\dots,clicks_n$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="4" />
                      <option name="name" value="Maximum Advertisement Revenue" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_ad_revenue.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="846" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="238" />
                                      <option name="offset" value="846" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_ad_revenue.py" />
                                <option name="text" value="# python3&#10;&#10;from itertools import permutations&#10;&#10;&#10;def max_dot_product_naive(first_sequence, second_sequence):&#10;    assert len(first_sequence) == len(second_sequence)&#10;    assert len(first_sequence) &lt;= 10 ** 3&#10;    assert all(0 &lt;= f &lt;= 10 ** 5 for f in first_sequence)&#10;    assert all(0 &lt;= s &lt;= 10 ** 5 for s in second_sequence)&#10;&#10;    max_product = 0&#10;    for permutation in permutations(second_sequence):&#10;        dot_product = sum(first_sequence[i] * permutation[i] for i in range(len(first_sequence)))&#10;        max_product = max(max_product, dot_product)&#10;&#10;    return max_product&#10;&#10;&#10;def max_dot_product(first_sequence, second_sequence):&#10;    assert len(first_sequence) == len(second_sequence)&#10;    assert len(first_sequence) &lt;= 10 ** 3&#10;    assert all(0 &lt;= f &lt;= 10 ** 5 for f in first_sequence)&#10;    assert all(0 &lt;= s &lt;= 10 ** 5 for s in second_sequence)&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    n = int(input())&#10;    prices = list(map(int, input().split()))&#10;    clicks = list(map(int, input().split()))&#10;    assert len(prices) == len(clicks) == n&#10;    print(max_dot_product(prices, clicks))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_ad_revenue_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="443" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="25" />
                                      <option name="offset" value="443" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="838" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="0" />
                                      <option name="offset" value="846" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_ad_revenue_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from maximum_ad_revenue import max_dot_product, max_dot_product_naive&#10;&#10;&#10;class TestMaxDotProduct(unittest.TestCase):&#10;    def test_small(self):&#10;        for (first_sequence, second_sequence) in [&#10;            ([1], [2]),&#10;            ([2], [1]),&#10;            ([1], [1]),&#10;            ([1, 2], [5, 10]),&#10;            ([2, 1], [5, 10]),&#10;            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]),&#10;            ([17, 12, 20], [19, 2, 3]),&#10;            type here&#10;        ]:&#10;            self.assertEqual(&#10;                max_dot_product(list(first_sequence), list(second_sequence)),&#10;                max_dot_product_naive(first_sequence, second_sequence)&#10;            )&#10;&#10;    def test_large(self):&#10;        n = 10 ** 3&#10;        self.assertEqual(max_dot_product([0] * n, [0] * n), 0)&#10;        self.assertEqual(max_dot_product([1] * n, [1] * n), n)&#10;        type here&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from random import randint&#10;from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from maximum_ad_revenue import max_dot_product&#10;&#10;&#10;def reference(a, b):&#10;    a = sorted(a)&#10;    b = sorted(b)&#10;    return sum(a[i] * b[i] for i in range(len(a)))&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;maximum_ad_revenue_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for n in [10, 20, 30]:&#10;        a = [randint(0, 10 ** 5) for _ in range(n)]&#10;        b = [randint(0, 10 ** 5) for _ in range(n)]&#10;&#10;        if reference(a, b) != max_dot_product(a, b):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for a={}, b={}&quot;.format(a, b))&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Collecting Signatures&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;You are responsible for collecting signatures from all tenants in a building.&#10;For each tenant, you know a period of time when he or she is at home.&#10;You would like to collect all signatures by visiting the building as&#10;few times as possible. For simplicity, we assume that when you enter&#10;the building, you instantly collect the signatures of all tenants that&#10;are in the building at that time.&#10;&#10;**Input**: A sequence of $n \le 10^3$ segments&#10;$[l_1,r_1],...,[l_n,r_n]$ on a line.&#10;&#10;**Output**: A set of points of minimum size&#10;such that each segment $[l_i,r_i]$ contains a point,&#10;i.e., there exists a point $x$ such that $l_i \le x \le r_i$.&#10;&#10;&#10;&lt;div class='hint'&gt;&#10;A detailed solution for this programming challenge is covered in the &lt;a href=&quot;http://bit.ly/2MvJBF9&quot;&gt;companion MOOCBook&lt;/a&gt;. But we strongly encourage you to do your best to solve the challenge yourself before looking into the book! There are at least three good reasons for this.&#10;&lt;ul&gt;&#10;&lt;li&gt;By solving this challenge, you practice solving algorithmic problems similar to those given at technical interviews.&lt;/li&gt;&#10;&lt;li&gt;The satisfaction and self confidence that you get when passing the grader is priceless =)&lt;/li&gt;&#10;&lt;li&gt;Even if you fail to pass the grader yourself, the time will not be lost as you will better understand the solution from the book and better appreciate the beauty of the underlying ideas.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="5" />
                      <option name="name" value="Collecting Signatures" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from collecting_signatures import compute_optimal_points, Segment&#10;&#10;&#10;def reference(segments):&#10;    points = []&#10;    segments = sorted(segments, key=lambda x: x.end)&#10;    limit = -1&#10;    for segment in segments:&#10;        if limit &lt; segment.start:&#10;            limit = segment.end&#10;            points.append(segment.end)&#10;    return points&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;collecting_signatures_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for segments in [&#10;        [Segment(48, 90), Segment(1, 60), Segment(49, 51), Segment(18, 80)]&#10;    ]:&#10;        if reference(segments) != compute_optimal_points(segments):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for segments: {}&quot;.format(segments))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="collecting_signatures.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="158" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="227" />
                                      <option name="offset" value="158" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="collecting_signatures.py" />
                                <option name="text" value="# python3&#10;&#10;from collections import namedtuple&#10;from sys import stdin&#10;&#10;Segment = namedtuple('Segment', 'start end')&#10;&#10;&#10;def compute_optimal_points(segments):&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    n, *data = map(int, stdin.read().split())&#10;    input_segments = list(map(lambda x: Segment(x[0], x[1]), zip(data[::2], data[1::2])))&#10;    assert n == len(input_segments)&#10;    output_points = compute_optimal_points(input_segments)&#10;    print(len(output_points))&#10;    print(*output_points)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="collecting_signatures_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="342" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="96" />
                                      <option name="offset" value="330" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="collecting_signatures_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from collecting_signatures import compute_optimal_points, Segment&#10;&#10;&#10;class CollectingSignatures(unittest.TestCase):&#10;    def test(self):&#10;        for (segments, answer) in [&#10;            ([Segment(1, 3), Segment(2, 5), Segment(3, 6)], 1),&#10;            ([Segment(4, 7), Segment(1, 3), Segment(2, 5), Segment(5, 6)], 2),&#10;            type here&#10;        ]:&#10;            self.assertEqual(len(compute_optimal_points(segments)), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Number of Prizes&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;You are organizing a competition for &#10;children and have $n$ candies to give as prizes. &#10;You would like to use these candies for top $k$ places &#10;in a competition with a restriction that a higher place gets &#10;a larger number of candies. To make as many children happy &#10;as possible, you need to find the largest value of $k$ for &#10;which it is possible.&#10;&#10;**Input**: An integer $1 \le n \le 10^9$.&#10;&#10;**Output**: The maximum &#10;number $k$ such that $n$ can be represented as the sum of $k$ pairwise &#10;distinct positive integers and these integers (if there are many such &#10;representations, output any of them).&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="6" />
                      <option name="name" value="Maximum Number of Prizes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_number_of_prizes.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="97" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="204" />
                                      <option name="offset" value="108" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_number_of_prizes.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def compute_optimal_summands(n):&#10;    assert 1 &lt;= n &lt;= 10 ** 9&#10;    summands = []&#10;&#10;    type here&#10;&#10;    return summands&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    output_summands = compute_optimal_summands(input_n)&#10;    print(len(output_summands))&#10;    print(*output_summands)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_number_of_prizes_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="203" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="203" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_number_of_prizes_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from maximum_number_of_prizes import compute_optimal_summands&#10;&#10;&#10;class MaximumNumberOfPrizes(unittest.TestCase):&#10;    def test(self):&#10;        for (n, answer) in [(1, 1), (6, 3), (100, 13), type here]:&#10;            summands = compute_optimal_summands(n)&#10;            self.assertEqual(len(summands), answer)&#10;            self.assertEqual(sum(summands), n)&#10;            summands = sorted(summands)&#10;            self.assertTrue(all(summands[i] &lt; summands[i + 1] for i in range(len(summands) - 1)))&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from maximum_number_of_prizes import compute_optimal_summands&#10;&#10;&#10;def reference(n):&#10;    summands = []&#10;&#10;    k = 1&#10;    while n &gt;= k + k + 1:&#10;        summands.append(k)&#10;        n -= k&#10;        k += 1&#10;    summands.append(n)&#10;&#10;    return summands&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;maximum_number_of_prizes_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for n in [2, 7, 20, 239, 317]:&#10;        if reference(n) != compute_optimal_summands(n):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(n))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Salary&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;This is probably the most important problem &#10;in this course :). &#10;As the last question of an interview, &#10;your future boss gives you a few pieces of &#10;paper with a single number written on &#10;each of them and asks you to compose &#10;a largest number from these numbers. &#10;The resulting number is going to be &#10;your salary, so you are very motivated to &#10;solve this problem!&#10;&#10;**Input**: Integers &#10;$1 \le a_1, a_2, \dotsc, a_n \le 10^3$, where&#10;$1 \le n \le 100$.&#10;&#10;**Output**: The largest number that &#10;can be composed out of $a_1, \dotsc, a_n$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="7" />
                      <option name="name" value="Maximum Salary" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_salary_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="253" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="253" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_salary_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from random import randint&#10;from maximum_salary import largest_number_naive, largest_number&#10;&#10;&#10;class TestLargestNumber(unittest.TestCase):&#10;    def test_small(self):&#10;        for numbers in [&#10;            [1],&#10;            [1, 2],&#10;            type here&#10;            [1, 12],&#10;            [2, 12],&#10;            [2, 21],&#10;            [2, 21, 23, 211, 213, 231, 232]&#10;        ]:&#10;            self.assertEqual(largest_number(numbers),&#10;                             largest_number_naive(numbers))&#10;&#10;    def test_random(self):&#10;        for n in range(2, 7):&#10;            for max_value in [10, 20, 100, 1000]:&#10;                for _ in range(10):&#10;                    numbers = [randint(1, max_value) for _ in range(n)]&#10;                    self.assertEqual(largest_number(numbers),&#10;                                     largest_number_naive(numbers))&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from maximum_salary import largest_number&#10;&#10;&#10;def reference(numbers):&#10;    numbers = list(map(str, numbers))&#10;&#10;    for _ in numbers:&#10;        for i in range(len(numbers) - 1):&#10;            if numbers[i] + numbers[i + 1] &lt; numbers[i + 1] + numbers[i]:&#10;                t = numbers[i]&#10;                numbers[i] = numbers[i + 1]&#10;                numbers[i + 1] = t&#10;&#10;    return int(&quot;&quot;.join(numbers))&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;maximum_salary_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for numbers in [&#10;        [2, 21, 23, 211, 213, 231, 232],&#10;        [56, 5, 6, 556, 566, 666, 665, 656]&#10;    ]:&#10;        if reference(numbers) != largest_number(numbers):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(numbers))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_salary.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="298" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="331" />
                                      <option name="offset" value="351" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_salary.py" />
                                <option name="text" value="# python3&#10;&#10;from itertools import permutations&#10;&#10;&#10;def largest_number_naive(numbers):&#10;    numbers = list(map(str, numbers))&#10;&#10;    largest = 0&#10;&#10;    for permutation in permutations(numbers):&#10;        largest = max(largest, int(&quot;&quot;.join(permutation)))&#10;&#10;    return largest&#10;&#10;&#10;def largest_number(numbers):&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    n = int(input())&#10;    input_numbers = input().split()&#10;    assert len(input_numbers) == n&#10;    print(largest_number(input_numbers))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="4" />
                <option name="name" value="Divide-and-Conquer" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Binary Search&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;**Input:** A sorted array $K=[k_0, \dotsc, k_{n-1}]$ &#10;of $1 \le n \le 3 \cdot 10^4$ distinct integers and&#10;an array $Q=\{q_0,\dotsc,q_{m-1}\}$ of &#10;$1 \le m \le 10^5$ integers.&#10;&#10;**Output:** For all $i$ from $0$ to $m-1$, &#10;output an index $0 \le j \le n-1$ such &#10;that $k_j=q_i$ or $-1$, if there is no such index.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Binary Search" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="binary_search_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="241" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="17" />
                                      <option name="offset" value="241" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="520" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="45" />
                                      <option name="offset" value="516" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="binary_search_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from binary_search import binary_search, linear_search&#10;&#10;&#10;class TestBinarySearch(unittest.TestCase):&#10;    def test_small(self):&#10;        for (keys, query) in [&#10;            ([1, 2, 3], 1),&#10;            ([4, 5, 6], 7),&#10;            type here&#10;        ]:&#10;            self.assertEqual(&#10;                linear_search(keys, query),&#10;                binary_search(keys, query)&#10;            )&#10;&#10;    def test_large(self):&#10;        for (keys, query, answer) in [&#10;            (list(range(10 ** 4)), 10 ** 4, -1),&#10;            type here&#10;            (list(range(10 ** 4)), 239, 239),&#10;        ]:&#10;            self.assertEqual(binary_search(keys, query), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from binary_search import binary_search&#10;from random import randrange&#10;&#10;&#10;def reference(keys, query):&#10;    assert all(keys[i] &lt; keys[i + 1] for i in range(len(keys) - 1))&#10;    assert 1 &lt;= len(keys) &lt;= 10 ** 4&#10;&#10;    left, right = 0, len(keys)&#10;    while left + 1 &lt; right:&#10;        ave = (left + right) // 2&#10;        if keys[ave] &lt;= query:&#10;            left = ave&#10;        else:&#10;            right = ave&#10;    if keys[left] != query:&#10;        return -1&#10;    else:&#10;        return left&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;binary_search_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for _ in range(20):&#10;        keys = set()&#10;        for i in range(100):&#10;            x = randrange(239239) + 1&#10;            while x in keys:&#10;                x = randrange(239239) + 1&#10;            keys.add(x)&#10;        keys = sorted(list(keys))&#10;&#10;        for key in keys:&#10;            for query in (key, key + 1):&#10;                if binary_search(keys, query) != reference(keys, query):&#10;                    all_tests_passed = False&#10;                    failed(&quot;Wrong answer for keys={}, query={}&quot;.format(keys, query))&#10;                    break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="binary_search.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="288" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="342" />
                                      <option name="offset" value="285" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="binary_search.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def linear_search(keys, query):&#10;    for i in range(len(keys)):&#10;        if keys[i] == query:&#10;            return i&#10;&#10;    return -1&#10;&#10;&#10;def binary_search(keys, query):&#10;    assert all(keys[i] &lt; keys[i + 1] for i in range(len(keys) - 1))&#10;    assert 1 &lt;= len(keys) &lt;= 3 * 10 ** 4&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_keys = list(map(int, input().split()))[1:]&#10;    input_queries = list(map(int, input().split()))[1:]&#10;&#10;    for q in input_queries:&#10;        print(binary_search(input_keys, q), end=' ')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Majority Element&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;**Input.** A sequence of $n \le 10^5$ integers.&#10;&#10;**Output.** 1, if there is an element &#10;that is repeated more than $n/2$ times, &#10;and 0 otherwise.&#10;&#10;As you might have already guessed, this problem can be solved by the divide-and-conquer algorithm in time $O(n\log n)$. Indeed, if a sequence of length $n$ contains a majority element, then the same element is also a majority element for one of its halves. Thus, to solve this problem you first split a given sequence into halves and recursively solve it for each half. Do you see how to combine the results of two recursive calls?&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Majority Element" />
                      <option name="record" value="-1" />
                      <option name="status" value="Failed" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="majority_element.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="268" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="609" />
                                      <option name="offset" value="268" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Failed" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="majority_element.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def majority_element_naive(elements):&#10;    assert len(elements) &lt;= 10 ** 5&#10;    for e in elements:&#10;        if elements.count(e) &gt; len(elements) / 2:&#10;            return 1&#10;&#10;    return 0&#10;&#10;&#10;def majority_element(elements):&#10;    assert len(elements) &lt;= 10 ** 5&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    input_elements = list(map(int, input().split()))&#10;    assert len(input_elements) == input_n&#10;    print(majority_element(input_elements))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="majority_element_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="296" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="21" />
                                      <option name="offset" value="296" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Failed" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="majority_element_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from majority_element import majority_element, majority_element_naive&#10;&#10;&#10;class TestMajorityElement(unittest.TestCase):&#10;    def test_small(self):&#10;        for elements in [&#10;            [7, 2, 7],&#10;            [7, 8, 9],&#10;            [2, 3, 2, 3],&#10;            [1, 2, 3, 4],&#10;            type here&#10;        ]:&#10;            self.assertEqual(&#10;                majority_element(list(elements)),&#10;                majority_element_naive(elements)&#10;            )&#10;&#10;    def test_large(self):&#10;        for (elements, answer) in [&#10;            ([0] * 5000 + [1] * 5000, 0)&#10;        ]:&#10;            self.assertEqual(&#10;                majority_element(elements),&#10;                answer&#10;            )&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from majority_element import majority_element&#10;&#10;&#10;def reference(elements):&#10;    table = {}&#10;    for e in elements:&#10;        if e in table:&#10;            table[e] += 1&#10;        else:&#10;            table[e] = 1&#10;&#10;    for e in table:&#10;        if table[e] &gt; len(elements) / 2:&#10;            return 1&#10;&#10;    return 0&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;majority_element_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for elements, answer in [&#10;        ([1, 1, 2], 1),&#10;        ([1, 2], 0),&#10;        ([7, 8, 7], 1),&#10;    ]:&#10;        if majority_element(elements) != answer:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for elements={}&quot;.format(elements))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Improving QuickSort&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Modify the given implementation of the QuickSort algorithm&#10;so that it works fast even on sequences containing&#10;many identical elements.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="3" />
                      <option name="name" value="Improving QuickSort" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="quicksort_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="240" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="240" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="quicksort_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from quicksort import randomized_quick_sort&#10;from random import randint&#10;&#10;&#10;class TestQuickSort(unittest.TestCase):&#10;    def test_small(self):&#10;        for array in [&#10;            ([1, 2, 3]),&#10;            ([3, 2, 1]),&#10;            type here&#10;        ]:&#10;            sorted_array = sorted(list(array))&#10;            randomized_quick_sort(array, 0, len(array) - 1)&#10;            self.assertEqual(array, sorted_array)&#10;&#10;    def test_large(self):&#10;        for n in (10, 100, 10 ** 5):&#10;            for max_value in (1, 2, 10, 10 ** 5):&#10;                array = [randint(0, max_value) for _ in range(n)]&#10;                sorted_array = sorted(list(array))&#10;                randomized_quick_sort(array, 0, len(array) - 1)&#10;                self.assertEqual(array, sorted_array)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from quicksort import randomized_quick_sort&#10;from random import randint&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;quicksort_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for n in (3, 4, 5, 10, 100):&#10;        for array in (&#10;            [1] * n,&#10;            [n - i for i in range(n)],&#10;            [i for i in range(n)],&#10;            [randint(0, n) for _ in range(n)]&#10;        ):&#10;            sorted_array = sorted(list(array))&#10;            randomized_quick_sort(array, 0, len(array) - 1)&#10;            if sorted_array != array:&#10;                all_tests_passed = False&#10;                failed(&quot;Wrong answer for array={}&quot;.format(array))&#10;                break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="quicksort.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="80" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="327" />
                                      <option name="offset" value="80" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="80" />
                                          <option name="offset" value="259" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="218" />
                                      <option name="offset" value="577" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="make a call to partition3 and then two recursive calls &#10;to randomized_quick_sort" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="quicksort.py" />
                                <option name="text" value="# python3&#10;&#10;from random import randint&#10;&#10;&#10;def partition3(array, left, right):&#10;    type here&#10;&#10;&#10;def randomized_quick_sort(array, left, right):&#10;    if left &gt;= right:&#10;        return&#10;    k = randint(left, right)&#10;    array[left], array[k] = array[k], array[left]&#10;    make a call to partition3 and then two recursive calls &#10;to randomized_quick_sort&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    elements = list(map(int, input().split()))&#10;    assert len(elements) == input_n&#10;    randomized_quick_sort(elements, 0, len(elements) - 1)&#10;    print(*elements)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Number of Inversions&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;The number of inversions in a sequence measures how close the sequence is to being sorted. For example, a sequence sorted in the non-descending order contains no inversions, while a sequence sorted in the descending order contains $n(n-1)/2$ inversions (every two elements form an inversion).&#10;&#10;A naive algorithm for the Number of Inversions Problem goes through all possible pairs $(i,j)$ and has running time $O(n^2)$. To solve this problem in time $O(n\log n)$ using the divide-and-conquer technique split the input array&#10;into two halves and make a recursive call on both halves. What remains to be done is computing the number of inversions formed by two elements from different halves. If we do this naively, this will bring us back to $O(n^2)$ running time, since the total number of such pairs is $\frac{n}{2} \cdot \frac{n}{2}=\frac{n^2}{4}=O(n^2)$. It turns out that one can compute the number of inversions formed by two elements from different halves in time $O(n)$, if both halves are already sorted. This suggest that instead of solving the original problem we solve a more general problem: compute the number of inversions in the given array and sort it at the same time.&#10;&#10;Compute the number of inversions in &#10;a sequence of length at most $30000$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="4" />
                      <option name="name" value="Number of Inversions" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="number_of_inversions_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="283" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="283" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="814" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="814" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="number_of_inversions_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from number_of_inversions import compute_inversions, compute_inversions_naive&#10;from random import randint&#10;&#10;&#10;class TestNumberOfInversions(unittest.TestCase):&#10;    def test_small(self):&#10;        for array in [&#10;            ([1, 2, 3]),&#10;            ([3, 2, 1]),&#10;            type here&#10;        ]:&#10;            self.assertEqual(compute_inversions(array),&#10;                             compute_inversions_naive(array))&#10;&#10;    def test_random(self):&#10;        for n in (10, 100):&#10;            for max_value in (1, 2, 10, 10 ** 5):&#10;                array = [randint(0, max_value) for _ in range(n)]&#10;                self.assertEqual(compute_inversions(array),&#10;                                 compute_inversions_naive(array))&#10;&#10;    def test_large(self):&#10;        self.assertEqual(compute_inversions([1] * 100), 0)&#10;        type here&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from number_of_inversions import compute_inversions, compute_inversions_naive&#10;from random import randint&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;number_of_inversions_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;    for n in (3, 4, 5, 10, 100):&#10;        for array in (&#10;            [1] * n,&#10;            [n - i for i in range(n)],&#10;            [i for i in range(n)],&#10;            [randint(0, n) for _ in range(n)]&#10;        ):&#10;            if compute_inversions(array) != compute_inversions_naive(array):&#10;                all_tests_passed = False&#10;                failed(&quot;Wrong answer for array={}&quot;.format(array))&#10;                break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="number_of_inversions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="285" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="285" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="number_of_inversions.py" />
                                <option name="text" value="# python3&#10;&#10;from itertools import combinations&#10;&#10;&#10;def compute_inversions_naive(a):&#10;    number_of_inversions = 0&#10;    for i, j in combinations(range(len(a)), 2):&#10;        if a[i] &gt; a[j]:&#10;            number_of_inversions += 1&#10;    return number_of_inversions&#10;&#10;&#10;def compute_inversions(a):&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    elements = list(map(int, input().split()))&#10;    assert len(elements) == input_n&#10;    print(compute_inversions(elements))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="inversion_optimal.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="inversion_optimal.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Points and Segments&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;You are organizing an online lottery. To participate, a person bets on a single integer. You then draw several segments of consecutive integers at random. A participant’s payoff is proportional to the number of segments that contain the participant’s number. You need an efficient algorithm for computing the payoffs for all participants. A simple scan of the list of all ranges for each participant is too slow since your lottery is very popular: you have thousands of participants and thousands of ranges.&#10;&#10;&#10;**Input:** A list of $n \le 50000$ segments and &#10;a list of $m \le 50000$ points.&#10;&#10;**Output:** The number of segments &#10;containing each point.&#10;&#10;&#10;&lt;div class='hint'&gt;&#10;A detailed solution for this programming challenge is covered in the &lt;a href=&quot;http://bit.ly/2MvJBF9&quot;&gt;companion MOOCBook&lt;/a&gt;. But we strongly encourage you to do your best to solve the challenge yourself before looking into the book! There are at least three good reasons for this.&#10;&lt;ul&gt;&#10;&lt;li&gt;By solving this challenge, you practice solving algorithmic problems similar to those given at technical interviews.&lt;/li&gt;&#10;&lt;li&gt;The satisfaction and self confidence that you get when passing the grader is priceless =)&lt;/li&gt;&#10;&lt;li&gt;Even if you fail to pass the grader yourself, the time will not be lost as you will better understand the solution from the book and better appreciate the beauty of the underlying ideas.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="5" />
                      <option name="name" value="Organizing a Lottery" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="organizing_lottery_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="245" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="245" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="456" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="456" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="501" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="501" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="organizing_lottery_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from organizing_lottery import points_cover, points_cover_naive&#10;&#10;&#10;class PointsAndSegments(unittest.TestCase):&#10;    def test_small(self):&#10;        for starts, ends, points in [&#10;            ([0, 7], [5, 10], [1, 6, 11]),&#10;            type here&#10;        ]:&#10;            self.assertEqual(points_cover(list(starts), list(ends), list(points)),&#10;                             points_cover_naive(starts, ends, points))&#10;&#10;    def test_random(self):&#10;        type here&#10;&#10;    def test_large(self):&#10;        type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from organizing_lottery import points_cover, points_cover_naive&#10;from random import randint&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;organizing_lottery_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for n in (3, 4, 5, 10, 100):&#10;        for m in (3, 4, 100, 200):&#10;            points = [randint(-10, 10) for _ in range(m)]&#10;            starts = [randint(-5, 0) for _ in range(n)]&#10;            ends = [randint(0, 5) for _ in range(n)]&#10;&#10;            if points_cover(starts, ends, points) != points_cover_naive(starts, ends, points):&#10;                all_tests_passed = False&#10;                failed(&quot;Wrong answer for starts={}, ends={}, points={}&quot;.format(starts, ends, points))&#10;                break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="organizing_lottery.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="416" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="416" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="organizing_lottery.py" />
                                <option name="text" value="# python3&#10;from sys import stdin&#10;from bisect import bisect_left, bisect_right&#10;&#10;&#10;def points_cover_naive(starts, ends, points):&#10;    assert len(starts) == len(ends)&#10;    count = [0] * len(points)&#10;&#10;    for index, point in enumerate(points):&#10;        for start, end in zip(starts, ends):&#10;            if start &lt;= point &lt;= end:&#10;                count[index] += 1&#10;&#10;    return count&#10;&#10;&#10;def points_cover(starts, ends, points):&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    data = list(map(int, stdin.read().split()))&#10;    n, m = data[0], data[1]&#10;    input_starts, input_ends = data[2:2 * n + 2:2], data[3:2 * n + 2:2]&#10;    input_points = data[2 * n + 2:]&#10;&#10;    output_count = points_cover(input_starts, input_ends, input_points)&#10;    print(*output_count)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lottery_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="lottery_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Closest Points&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Find the closest pair of points in a set of $n \le 10^5$ &#10;points on a plane.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="6" />
                      <option name="name" value="Closest Points" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="closest_points.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="600" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="600" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="closest_points.py" />
                                <option name="text" value="# python3&#10;from collections import namedtuple&#10;from itertools import combinations&#10;from math import sqrt&#10;&#10;&#10;Point = namedtuple('Point', 'x y')&#10;&#10;&#10;def distance_squared(first_point, second_point):&#10;    return (first_point.x - second_point.x) ** 2 + (first_point.y - second_point.y) ** 2&#10;&#10;&#10;def minimum_distance_squared_naive(points):&#10;    min_distance_squared = float(&quot;inf&quot;)&#10;&#10;    for p, q in combinations(points, 2):&#10;        min_distance_squared = min(min_distance_squared,&#10;                                   distance_squared(p, q))&#10;&#10;    return min_distance_squared&#10;&#10;&#10;def minimum_distance_squared(points):&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    input_points = []&#10;    for _ in range(input_n):&#10;        x, y = map(int, input().split())&#10;        input_point = Point(x, y)&#10;        input_points.append(input_point)&#10;&#10;    print(&quot;{0:.9f}&quot;.format(sqrt(minimum_distance_squared_naive(input_points))))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="closest_points_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="278" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="278" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="1059" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1059" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="closest_points_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from closest_points import minimum_distance_squared, minimum_distance_squared_naive, Point&#10;from random import randint&#10;&#10;&#10;class ClosestPoints(unittest.TestCase):&#10;    def test_small(self):&#10;        for points in (&#10;            [Point(1, 0), Point(1, 1)],&#10;            type here&#10;        ):&#10;            self.assertAlmostEqual(minimum_distance_squared(points),&#10;                                   minimum_distance_squared_naive(points),&#10;                                   delta=1e-03)&#10;&#10;    def test_random(self):&#10;        for n in [2, 5, 10, 100]:&#10;            for max_value in [1, 2, 3, 1000]:&#10;                points = []&#10;                for _ in range(n):&#10;                    x = randint(-max_value, max_value)&#10;                    y = randint(-max_value, max_value)&#10;                    points.append(Point(x, y))&#10;&#10;                self.assertAlmostEqual(minimum_distance_squared(points),&#10;                                       minimum_distance_squared_naive(points),&#10;                                       delta=1e-03)&#10;&#10;    def test_large(self):&#10;        type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from closest_points import minimum_distance_squared, minimum_distance_squared_naive, Point&#10;from math import fabs&#10;from random import randint&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;closest_points_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for points in (&#10;        [Point(-10 ** 9, - 10 ** 9), Point(10 ** 9, 10 ** 9)],&#10;        [Point(i, i + 1) for i in range(100)],&#10;        [Point(randint(1, 10), randint(1, 10)) for _ in range(5)],&#10;        [Point(randint(1, 10), randint(1, 10)) for _ in range(500)]&#10;    ):&#10;        if fabs(minimum_distance_squared(points) - minimum_distance_squared_naive(points)) &gt; 1e-03:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for points={}&quot;.format(points))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="closest_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="closest_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="5" />
                <option name="name" value="Dynamic Programming" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Money Change Again&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Compute the minimum number of coins needed to change &#10;the given value into coins with denominations 1, 3, and 4.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="1" />
                      <option name="name" value="Money Change Again" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="money_change_again.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="365" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="165" />
                                      <option name="offset" value="365" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="money_change_again.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def change_naive(money):&#10;    min_coins = float(&quot;inf&quot;)&#10;&#10;    for num1 in range(money + 1):&#10;        for num3 in range(money // 3 + 1):&#10;            for num4 in range(money // 4 + 1):&#10;                if 1 * num1 + 3 * num3 + 4 * num4 == money:&#10;                    min_coins = min(min_coins, num1 + num3 + num4)&#10;&#10;    return min_coins&#10;&#10;&#10;def change(money):&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    amount = int(input())&#10;    print(change(amount))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="money_change_again_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="318" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="318" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="money_change_again_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from money_change_again import change, change_naive&#10;&#10;&#10;class MoneyChangeAgain(unittest.TestCase):&#10;    def test_small(self):&#10;        for money in range(1, 40):&#10;            self.assertEqual(change(money), change_naive(money))&#10;&#10;    def test_large(self):&#10;        for money, answer in ((200, 50), (239, 60), type here):&#10;            self.assertEqual(change(money), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from money_change_again import change, change_naive&#10;from random import randint&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;money_change_again_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for _ in range(20):&#10;        money = randint(1, 100)&#10;        if change_naive(money) != change(money):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for money={}&quot;.format(money))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="money_change_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="money_change_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Primitive Calculator&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Find the minimum number of operations &#10;needed to get a positive integer $n$ from 1 &#10;using only three operations: &#10;add 1, multiply by 2, and multiply by 3.&#10;&#10;**Input.** An integer $1 \le n \le 10^6$.&#10;&#10;**Output.** In the first line, output &#10;the minimum number $k$ of operations needed to &#10;get $n$ from 1. In the second line, &#10;output a sequence of intermediate numbers. &#10;That is, the second line should contain &#10;positive integers $a_0,a_1,\dotsc,a_k$ &#10;such that $a_0 = 1$, $a_k = n$, and &#10;for all $1 \le i \le k$, $a_i$ is equal to &#10;either $a_{i−1} + 1$, $2a_{i−1}$, or $3a_{i−1}$. &#10;If there are many such sequences, output any one of them.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="2" />
                      <option name="name" value="Primitive Calculator" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="primitive_calculator_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="186" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="186" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="primitive_calculator_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from primitive_calculator import compute_operations&#10;&#10;&#10;class PrimitiveCalculator(unittest.TestCase):&#10;    def test(self):&#10;        for n, answer in ((2, 1), (3, 1), (5, 3), type here):&#10;            sequence = compute_operations(n)&#10;            self.assertEqual(answer, len(sequence) - 1)&#10;            self.assertEqual(sequence[0], 1)&#10;            self.assertEqual(sequence[-1], n)&#10;            for i in range(len(sequence) - 1):&#10;                if sequence[i + 1] != sequence[i] + 1 and sequence[i + 1] != 2 * sequence[i]:&#10;                    self.assertEqual(sequence[i + 1], 3 * sequence[i])&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from primitive_calculator import compute_operations&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;primitive_calculator_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for n, answer in ((20, 4), (200, 8), (239, 10), (69006, 19)):&#10;        sequence = compute_operations(n)&#10;        if len(sequence) - 1 != answer:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for n={}&quot;.format(n))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="primitive_calculator.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="72" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="26" />
                                      <option name="offset" value="72" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="primitive_calculator.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def compute_operations(n):&#10;    assert 1 &lt;= n &lt;= 10 ** 6&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n = int(input())&#10;    output_sequence = compute_operations(input_n)&#10;    print(len(output_sequence) - 1)&#10;    print(*output_sequence)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="primitive_cal_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="primitive_cal_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Edit Distance&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given two strings of length at most 100,&#10;compute the minimum number of single symbol &#10;insertions, deletions, and substitutions to &#10;transform one string into the other one.&#10;&#10;Edit distance has many applications &#10;in computational biology, &#10;natural language processing, &#10;spell checking, etc. &#10;For example, biologists often analyze edit &#10;distances when they  search for &#10;disease-causing mutations.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="3" />
                      <option name="name" value="Edit Distance" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="edit_distance.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="64" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="64" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="edit_distance.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def edit_distance(first_string, second_string):&#10;    type here&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(edit_distance(input(), input()))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="edit_distance_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="364" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="364" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="edit_distance_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from edit_distance import edit_distance&#10;&#10;&#10;class EditDistance(unittest.TestCase):&#10;    def test(self):&#10;        for first_string, second_string, answer in (&#10;            (&quot;ab&quot;, &quot;ab&quot;, 0),&#10;            (&quot;short&quot;, &quot;ports&quot;, 3),&#10;            (&quot;editing&quot;, &quot;distance&quot;, 5),&#10;            (&quot;a&quot; * 100, &quot;a&quot; * 100, 0),&#10;            (&quot;ab&quot; * 50, &quot;ba&quot; * 50, 2),&#10;            type here&#10;        ):&#10;            self.assertEqual(edit_distance(first_string, second_string), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from edit_distance import edit_distance&#10;&#10;&#10;def reference(s, t):&#10;    sn = len(s)&#10;    tn = len(t)&#10;&#10;    f = [[10**9] * (tn + 2) for _ in range(sn + 2)]&#10;    f[0][0] = 0&#10;&#10;    def relax(p, q, x):&#10;        f[p][q] = min(f[p][q], x)&#10;&#10;    for i in range(sn + 1):&#10;        for j in range(tn + 1):&#10;            if i &lt; sn and j &lt; tn:&#10;                relax(i + 1, j + 1, f[i][j] + (1 if s[i] != t[j] else 0))&#10;            relax(i + 1, j, f[i][j] + 1)&#10;            relax(i, j + 1, f[i][j] + 1)&#10;    return f[sn][tn]&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;edit_distance_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for first, second in (&#10;        (&quot;abacabadabacabaeabacab&quot;, &quot;aeabacabad&quot;),&#10;&#10;    ):&#10;        if edit_distance(first, second) != reference(first, second):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for {} and {}&quot;.format(first, second))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="edit_distance_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="edit_distance_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Longest Common Subsequence of Two Sequences&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Compute the longest common subsequence of &#10;two integer sequences of length at most 100.&#10;&#10;Given two sequences &#10;$A=(a_1, a_2, \dotsc, a_n)$ and &#10;$B=(b_1, b_2, \dotsc, b_m)$, find the &#10;length of their longest common subsequence, &#10;i.e., the largest non-negative integer $p$ such that &#10;there exist indices&#10;$1 \leq i_1 &lt; i_2 &lt;  \dotsb &lt;  i_p \leq n$ and&#10;$1 \leq j_1 &lt; j_2 &lt;  \dotsb &lt;  j_p \leq m$&#10;such that &#10;$a_{i_1} = b_{j_1}, \dotsc, a_{i_p} = b_{j_p}$. &#10;The problem has applications in data comparison &#10;(e.g., diff utility, merge operation &#10;in various version control systems), &#10;bioinformatics (finding similarities &#10;between genes in various species), and others.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="4" />
                      <option name="name" value="Longest Common Subsequence of Two Sequences" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="iVBORw0KGgoAAAANSUhEUgAAAmcAAAIsCAMAAACA8/6MAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAA/FBMVEX///+SkpKSkpKSkpKSkpKSkpKSkpKTk5OSkpKSkpKTk5N+fn5/f3+GhoaSkpKLi4t8fHyTk5MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSkpKGhoaSkpKSkpKSkpJxcXGSkpKBgYGSkpKSkpKSkpKSkpKSkpKSkpKSkpKTk5OTk5OTk5OTk5OSkpKSkpKSkpKQkJCTlpedp6ySlJaaoaXD5/yaoqa0zt6at8hbbHaAmKZoe4Snxth1iZUAAACNp7caHyINDxFOXGW01uk0PkMnLjJBTVSXm56nuMGVmpyksrqYn6Oqvcn///8cLUoAAAAANXRSTlMAM7tE3Ygip8e3l+7v+tn67HUzRCJmiFURd7uqme7dzN/1tNbI48TxZncRmVXMqsBQXGnNz8daLRgAAAABYktHRACIBR1IAAAACXBIWXMAAADIAAAAyABj+uetAAAAB3RJTUUH4wUcFx4yi9R/cQAAFAtJREFUeNrt3Ht/4sahgGF82zrdNPEikDFGeJNNT7zebNq0lZtmGwmL4SJwe87p9/8wlcAY4cwIzQC67fv+tfntKhLiQZcZQaOxQ0fHRL/tqLHfTlyi33aCM8IZ4QxnVKyz0zOiVacHc3bcIFp1jDPCGeEMZ4QzwhnhDGeEM8IZzghnhDPCGc4IZ4Qzdi7hjHBGOMMZ4YxwRjjDGeGMcIYzwhnhjHCGM8IZ4QxnhDPCGeEMZ4QzwhkRzghnhDOcEc4IZ4QznBHOCGc4I5wRzghnOCOcEc5wRjgjnBHOcEY4I5wRznBGOCOc4YxwRjgjnOGMcEY4wxnhjHBGOMMZ4YxwRoQzwhnhDGeEM8IZ4QxnhDPCGc4IZ4QzwhnOCGeEM5wRzghnhDOcEc4IZ0Q4I5wRznBGOCOcEc5wRjgjnOGMcEY4I5zhjHBGOMMZ4YxwRjjDGeGMcEY4wxnhjHCGM8IZ4YxwhjPCGeEMZ4QzwhnhDGeEM8IZEc4IZ4QznBHOCGeEM5wRzghnOCOcEc4IZzgjnBHOcEY4I5wRznBGOCOcEc5wRjgjnOGMcEY4I5zhjHBGOMMZ4YxwRjjDGeGMcMbOJZwRzghnOCOcEc4IZzgjnBHOcEY4I5wRznBGOCOc4YxwRjgjnOGMcEY4I8IZ4YxwhjPCGeGMcIYzwhnhDGeEM8IZ4QxnhDPCGc4IZ4QzwhnOCGeEM8IZzghnhDOcEc4IZ4tenRn2u/PzL0wX/J3Rgl+cn//eaMHzHRY0Wu73O+ybL0zfkJNSO1v8M5Puq7Ng7hXyEs9whjOcue7rY5O+dN2//2zSP1z3S6M1/sF1fzFaY7QjvjJaY7wHTfpqh33ztdEaTyvgzOxm4dx1f/5k0j9d99xojReu+6vRGqMd8cZojdGCRsu92WHfXBit8QxnOMMZznCGM5zhDGc4wxnOcIYznOEMZzjDGc5whjOc4QxnOMMZznB2UGdNa7OmljPPj/L0nbXatm1fGjgbROt7CIycdeyOtrNm6p5JdxYMo20dGDtrXll1ctYVm11rOBuNl8uMR3rOOj3hdKMV9y81nQ0myxVOQ21nrZ4Qlrazm8Se6Wo5C6diMptF+2Zg5KzZV2xuVZ31Xzizsjvz10sNdZw1HREfWiJtwtZyNo1NL6hNAj1n1rX8tW1zltwzPR1n3kT44UKb8E2cxR//Vp2cvWDWzX595gkxexgN/MUbP8rurOWseEVvflvDWbTC+L0bzaP1zXScXfVFr2fmrJ/2CVQ7CyYrXo/yD+EWZ+14hbW6PhM3iY9NT7YzVc78px0Yqt53hbOu6K/ECeF0sjubJlcYaDjrXXUaHTNnttl9wEyMV+Kig2+o66zTv6mds8Q1Ukt6DaJyNp6uLkXiy7QwqzMrcbaMDjJX2Z1NVmeggeIAmnofkKezUeJsGZ05H3Sd2c5lzZw1RWfL4UzlzFsfUh7k77vc2XXi/Y5ODzeZnXnz5z/m5cySfgy2O3tMbN9QiLmms5ZoWzVzZjnJl3ejMX42WF/fBjrOku93M/qPjsH4meZ5cwdnlpGz5P7wpAf7VGfXN426Odu4jJFflWcYp9Vw1tp4v+Vv/jZnkevppxI72/zcSXdOmrN4rTV21nq+Pjdx5mV0Zr10Zus788U8zMlZ08TZ6KUzX8tZv9eoszPF4SyDs/ieKuv9ZnyqvNrN2VDFbO/O7Oi9bve63e5VS8dZfKp8MHZmO606O1MdzjI4G8oHI5XXZ9e7OAv9xShaTs5s52n0TD5ppb4+ezR11nHsRp2dqQ5nGZzNpENECmfxyFAzcRLVchYOphMhxtMgL2fRDXF3Se2mk93ZPHEhMdJ01us36uysqTqcbXcWqOdWzuVD3av3LJ4Nams4iwfOxotJVT8fZ/12vKXNnnzmV+ksOsA/n9sfpdNySmdPtx61ddZVHc62O3uUDRCp5wPiA9pNvDOtxZFC534z9IfB0/T9NA9nzU5yHsjKPh8QH9Dm8a3AaDbRu9/sdht1dmYpD2dbnQ1Us9oKZ83FeciJkPVs+d7cOq4Rv3eDPOYDNs6gvezOvOVsf4RsGj9tkH2ctv00e15XZ331DMsWZ+FEeHrPn7WWzyI5l/G8042Bs+V5KVdnHUf6jIHyeY1gtniNk0E875R9PmB5E1BfZ235hHYWZzP5Q0Gpzzk2r2y7vdCtM7+ZnOqUHiQO6Cz+SAgNZ9Eh7cH34z0z1pnftFdvQz2ddZyUCeN0Z77ikjzLc9tNxUNW25095u7M1nWWGEsLsjprCfvp4d2reHOjWrVyZiseqtvubJgYKNJ21pM/PJjBmV+Es76Js6n8lkXu7OXDzZJRnyo7azny93u7s5FyaD6Ds+hw5rSMnc1yd9Y1cOYpnv2VOmuKejtLfXQ+zZk3mQTm33e6EYrHbrY7UzwOfVhnPQNnc+nVmep4Zj8XXw72ZN/VqbCzpvyub7uzQHmrmcWZ6qypchZu3gd4+TqTfyi2OZuqnizZ9v0AS9TseyjLq4K2ibNwnrjVDANNZz3FVI7KWTAOk+Mas8OP0zbt5BW69BJ2i7OpUF1XfIbOopfkNAycRcxW567R8FE+h6d01rmOjmaqoRSpM2/9loUTxdBwijOD7we0E08FdTW/77TYzEf1NwA/Q2d9kf4UvMrZdPOKVcuZ1Rcpj0TLz5tjMV/iCuZi4unOb8YP3F/qOesIp7n+VDgdTWejseLa7PN01hZpgxpqZxvMZsNQ4/rMio8OKeuUO4sffJgORyN/Iuae5vMancvFrOplS+v6LLr2v7bbVrvnCNGXPvGodjaaRVsbGP/ugS0UFzOVdSafUNnqbLRGNplqzW9edkXfTpWtuN9cfRt9PNT83QNbpH8LU3kf0Fst1Vf8ZoLK2WAmxn5g+PsalmW14zlgp12ncVr5D0dkn3fSvt+8tLesUDmuEQ6nM//By/F3XJp2t9uzr5QbrHTme+a/41Lb8bN8nW2P3wtShzOc4QxnOMMZznCGM5zhDGc4wxnOcIYznOEMZzjDGc5whjOc4QxnONufs9Mzk9667r/+bdL/uu5bozV+47r/Z7TGaEd8a7TGaEGj5b7dYd98Y7TG4wo4M+s+7e/uDRc0XmO5yn/fuJ+js3ucpSm7/xydHR0b9u7i4q38b7772nX/mLrgO6M1vr24+E7xV//zNkr5f71QL5hetKDRct8p9s277+M35XuTnbq921I7239Hr+M1v891nYW9WJ1uT5+OPCcFbUCtnN2+Xu7MVzhLdnd2+nyG+4Cz3Zktd+XrHziebSh7vb6Q+vAKZ/tidtTA2XOvPqyRvT57Vdh21MfZ+2KYldrZ0YayuwK3pDbOPhTErMTOTo7Xyk5v7wrdlro4e2L2Mf8zQ1md3W4oK3prauJsxayAD205nd2ubzHd45Pit6cWzu5+LI5ZGZ0lBzLcH0/KsEl1cHb38elzW8glSOmclWMgo37OVswKGoIsmbOyDGTUzlnBzMrlrDwDGXVzdvS6WGZlclamgYyaOVsxe9/47J2VayCjXs5WzArcrSVxVraBjFo5+6F4ZqVwVsKBjDo5W82cF3qSKN5ZKQcyauTstqgpzVI5e/Vhrex1SZVV2lk5mBXs7FVZBzJq4+xDOZgV6mxjION9eZVV2Nlq5rxoZgU6+6HMAxk1cVbgAxolcbYxkPFDo4GzA9xhlYdZMc7u3pd7uKwezlZTmmVgVoSzKgxk1MBZ0TPnBTurxkBG9Z2Vi1nezqoykFF5Z0enpWKWr7PqDGRU3dlq5vys8fk5q9JARsWdleABjaKcVWsgo9rOTkrHLCdnlRvIqLSzpynNMjHLxVkFBzKq7KwkM+d5O6vkQEaFnZWS2cGdVXQgo7rOzkrJ7MDOTn5M3GJWVlmVnD19rE9Lxuygzk6qO5BRVWclmjnPy9nGQEallVXG2V1pmR3K2d1ttQcyKumsVA9o5OFscyDjqNHAWQ67/nnmvIzXwQdw9qryw2WVdFayBzQO7aweAxnVc3ZUamb7dlaXgYzKOSvdAxqHfLH1GciomrPyPaBxuBdbp4GMijkrPbO9vdiaDWRUy1kZH9A4yIut3UBGpZytZs7L/Onex4ut4UBGlZyV8wGNvb/YWg5kVMjZWRWY7fxiazqQUR1nHyrBbMcXW9uBjMo4K+/M+f5e7O3HtbKPNVZWYmdVYbbLi63zQEa1nJWf2S4v9vmc+aHmyop1dneS1lfR/+NPf5b+1U9v3vzlxKRowZ+MFvzLmzd/VvzVm/jF/lW14Bv1gk+Luu63P8kXPDHsCGe//WfK7u/de9VfuYblv+DW/+39/d7/38c403Dmqt+A+jg7gDKcSf7Z33826R+u+/WxSV+67pdGC/7BdX8x2lR3hwWNtvQjziT/7OdPJv3TdS+MNuzcdc+NFrxw3V+NNtXdYUHTfY8znOEMZzjDGc5whjOc4QxnOMMZznCGM5zhDGc4wxnOcIYznOEMZzirnzPPj/IMnLXatm1fmjjr2B0TZ4NoQx8CA2fBMFpyoOesaW3WxNkuzkZjsWg80nTW6gmn2xXCaes6i5YUlr6zwWS5pdNQ01k4FZPZLHqJAx1nXbHZNc52cOavd+RQy1nTEVfxkSky09NyZl3HK9N3No0/DAtqk0DLmTcRfrjQJnwNZ/0XziycmTvzhJg9jAb+4v0baTjrLJlFXcvRKJxd9UWvZ+Is2tJYy2geLTzTcRZMVrweFZ8lubMXzLpcn+3gzH/a86Hq7VM5i06aq7Og7JSidNa76jQ6Js6myS0NNJzNxHglLjoUhtmd3bSSL9fC2Q7OxtPVNUx8mRZmd+asP+DRCUbzPsDE2WR1zhsojrwKZ6PE2TI6cz5kd5a4w2nJDmc4y+zMWx8ZHuRvn8KZlTiRdPNw5s2f/6jn7DHxr4dCzLM6a4rOlsMZzjI7G6wvjANdZ/318czJ4Xj2KelM47yZfFme/JgtdWY5ycPZDeNn+xqn1XW2otKS33AezFn0gZhmvw/Y/PjIX+PWcdqeaONsj848nesz4Syvk+3VH3Jy5ot5mN3Z6KUzX99Za33sxtmuzuKbMY37TTt6y5z4SrktnGYjR2dDFTO5s/hU+bCjM8XhDGcmzobyUUzl+NnNYlDJaot+s5Gfs9BfjKJ90ro+e9zNmepwhjMTZzP52JJyPmAJLaKmmKk8gLNwMJ0IMZ4GOs7mieuBkZEz1eEMZwbOAsWkjHp+M55xiut1cnIWD5yNF7Oxvoaz6Dj9fKZ9lM+upTtrqg5nODNw9igdWUp9XqPtOAtojpWPs9AfBk/z/lON+YD4gDaPbwVGs4nJ/WZXdTjDmb6zgWpyWn3e7IqbVmsxJy59Iw43rhFrGWR35i3n3iNk0/ihAd3nzyzl4Qxn2s7CifD0nj9rOuImPmFa8WMNsoGNw43TLs6EGs9rBLPFh2EyiOed5rrO+sLG2b6czeQPMqiddRzR76zvB3p5Ovs0UR6WFAt6D74fv8Cxzvzm08WBcDo425MzX3FlrXZmr0+Wnb6QnVoO6OxR11liLC3QcxZ9nuwGzvbjbJgYYcrozEnMnbeFbCL9gM58Q2dT9Q2EamOiz1MLZ/txNlKOsCudtZLP/bUKcDYzcOapnsRVO2s58oeFcabvzJtMAt3vO1kbz5cK2QMbB3SmeAB7m7O5/OoszVnqFxlwpuMsUN5qph/P+kk21wd3Fm7eB3j6zlRnzRRnTSF/IAhn2s7CeeJWMww0rs9aiYPb5aGdBeMwOa4x0//+5lSkTcCrhmiVY7Q403IWMVudgkbDR8npSOEsOqHY6z939cZpDb4f4K2RhBP1ZZbSWfio/j6e0pklvSDAmYGz6eaXejI7iy6QV48DWdrPn10K6REw9bw5FvMlrmAuJp7u94RHY9W1WZqzvkgZ1MCZhrMNZrOhxvdQms7TvGbb0Xz+rHMZj+zeXLa0nMWPWkyHo5E/EXNP83vCo1m0bKD9uwfxeE0LZ3twNlojm0w15zeb0cVLv9vtaz6vYad+8zblfnP1bfTxUPN3DwYzMfYDg9/XcKRf2sSZ+XyA2e+4NK96Xbut+sTv/XdcwuF05j942r/jMvA9s99xkf2kBs7yd5YevxeEM5zhDGc4wxnOcIYznOEMZzjDGc5whjOc4QxnOMMZznCGM5zhDGc4K7WzX3416f9d9/sTk/7mun8zWvB71/2P0aa6OyxotKXvcSb9ZybdV2fBIsIZznCWv7OjY8PeXVy8NV3wndGCby8uvjNa8GKHBU13zxnO6DMNZ4QzwhnOCGeEM8IZzghnhDOcEc4IZ4QznBHOCGc4I5wRzghnOCOcEc4IZzgjnBHOcEY4I5wRznBGOCOc4YxwRjgjnOGMcEY4I8IZ4YxwhjPCGeGMcIYzwhnhDGeEM8IZ4QxnhDPCGc4IZ4QzwhnOCGeEM8IZzghnhDOcEc4IZ4QznBHOCGc4I5wRzghnOCOcEc6IcEY4I5zhjHBGOCOc4YxwRjjDGeGMcEY4wxnhjHCGM8IZ4YxwhjPCGeGMCGeEM8IZzghnhDPCGc4IZ4QznBHOCGeEM5wRzghnOCOcEc4IZzgjnBHOCGc4I5wRznBGOCOcEc5wRjgjnOGMcEY4I5zhjHBGOCPCGeGMcIYzwhnhjHCGM8IZ4QxnhDPCGeEMZ4QzwhnOCGeEM8IZzghnhDMinBHOCGc4I5wRzghnOCOcEc5wRjgjnBHOcEY4I5zhjHBGOCOc4YxwRjgjnOGMcEY4wxnhjHBGOMMZ4YxwhjPCGeGMcIYzwhnhjAhnhDPCGc4IZ4QzwhnOCGeEM5wRzghnhDOcEc4IZzgjnBHOCGc4I5wRzghnOCOcEc5wRjgjnBHO9uWM6EU4I5wRznBGOKPSO/svH70umVlm2V8AAAAldEVYdGRhdGU6Y3JlYXRlADIwMTktMDUtMjhUMjE6MzA6NTArMDI6MDAKRCL7AAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE5LTA1LTI4VDIxOjMwOjUwKzAyOjAwexmaRwAAABR0RVh0cGRmOlZlcnNpb24AUERGLTEuNSAFXAs5AAAAAElFTkSuQmCC" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from lcs2 import lcs2&#10;&#10;&#10;def reference(a, b):&#10;    n, m = len(a), len(b)&#10;    t = [[0] * (m + 1) for _ in range(n + 1)]&#10;&#10;    for i in range(1, n + 1):&#10;        for j in range(1, m + 1):&#10;            if a[i - 1] == b[j - 1]:&#10;                t[i][j] = max(t[i - 1][j - 1] + 1, t[i][j - 1], t[i - 1][j])&#10;            else:&#10;                t[i][j] = max(t[i - 1][j], t[i][j - 1])&#10;&#10;    return t[n][m]&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;lcs2_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for first, second in (&#10;        ([1, 2] * 50, [2, 1] * 50),&#10;        ([0] * 10, [i % 3 for i in range(10)]),&#10;    ):&#10;        if lcs2(first, second) != reference(first, second):&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for {} and {}&quot;.format(first, second))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcs2_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="426" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="426" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="lcs2_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from lcs2 import lcs2&#10;&#10;&#10;class LCS2(unittest.TestCase):&#10;    def test(self):&#10;        for first_sequence, second_sequence, answer in (&#10;            ((1, 2), (2, 1), 1),&#10;            ((1, 2), (3, 4), 0),&#10;            ([17] * 50, [17] * 25, 25),&#10;            ([1] * 100, [1] * 100, 100),&#10;            ((2, 7, 5), (2, 5), 2),&#10;            ((7, ), (1, 2, 3, 4), 0),&#10;            ((2, 7, 8, 3), (5, 2, 8, 7), 2),&#10;            type here&#10;        ):&#10;            self.assertEqual(lcs2(first_sequence, second_sequence), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcs2.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="137" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="137" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="lcs2.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def lcs2(first_sequence, second_sequence):&#10;    assert len(first_sequence) &lt;= 100&#10;    assert len(second_sequence) &lt;= 100&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    n = int(input())&#10;    a = list(map(int, input().split()))&#10;    assert len(a) == n&#10;&#10;    m = int(input())&#10;    b = list(map(int, input().split()))&#10;    assert len(b) == m&#10;&#10;    print(lcs2(a, b))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcs2_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="lcs2_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Longest Common Subsequence of Three Sequences&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Compute the longest common subsequence of &#10;three integer sequences of length at most 100.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="5" />
                      <option name="name" value="Longest Common Subsequence of Three Sequences" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from lcs3 import lcs3&#10;from random import randint, seed&#10;&#10;&#10;def ref(a, b, c):&#10;    d = [[[0 for _ in range(len(c) + 1)] for _ in range(len(b) + 1)] for _ in range(len(a) + 1)]&#10;    for i in range(len(a) + 1):&#10;        for j in range(len(b) + 1):&#10;            for k in range(len(c) + 1):&#10;                if i &lt; len(a):&#10;                    d[i + 1][j][k] = max(d[i][j][k], d[i + 1][j][k])&#10;                if j &lt; len(b):&#10;                    d[i][j + 1][k] = max(d[i][j][k], d[i][j + 1][k])&#10;                if k &lt; len(c):&#10;                    d[i][j][k + 1] = max(d[i][j][k], d[i][j][k + 1])&#10;                if i &lt; len(a) and j &lt; len(b) and k &lt; len(c) and a[i] == b[j] == c[k]:&#10;                    d[i + 1][j + 1][k + 1] = max(d[i + 1][j + 1][k + 1], d[i][j][k] + 1)&#10;    return d[len(a)][len(b)][len(c)]&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;lcs3_unit_tests.py&quot;)&#10;&#10;    seed(239)&#10;&#10;    all_tests_passed = True&#10;&#10;    for _ in range(10):&#10;        for n in (3, 5, 20, 10):&#10;            for m in (2, 3, 4, 10, 100):&#10;                lena = randint(1, n)&#10;                lenb = randint(1, n)&#10;                lenc = randint(1, n)&#10;                a = [randint(1, m) for _ in range(lena)]&#10;                b = [randint(1, m) for _ in range(lenb)]&#10;                c = [randint(1, m) for _ in range(lenc)]&#10;&#10;                if lcs3(a, b, c) != ref(a, b, c):&#10;                    all_tests_passed = False&#10;                    failed(&quot;Wrong answer: {}; {}; {}&quot;.format(a, b, c))&#10;                    break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcs3.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="191" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="191" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="lcs3.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def lcs3(first_sequence, second_sequence, third_sequence):&#10;    assert len(first_sequence) &lt;= 100&#10;    assert len(second_sequence) &lt;= 100&#10;    assert len(third_sequence) &lt;= 100&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    n = int(input())&#10;    a = list(map(int, input().split()))&#10;    assert len(a) == n&#10;&#10;    m = int(input())&#10;    b = list(map(int, input().split()))&#10;    assert len(b) == m&#10;&#10;    q = int(input())&#10;    c = list(map(int, input().split()))&#10;    assert len(c) == q&#10;&#10;    print(lcs3(a, b, c))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcs3_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="406" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="406" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="lcs3_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from lcs3 import lcs3&#10;&#10;&#10;class LCS3(unittest.TestCase):&#10;    def test(self):&#10;        for first_sequence, second_sequence, third_sequence, answer in (&#10;            ((1, 2, 3), (2, 1, 3), (1, 3, 5), 2),&#10;            ((8, 3, 2, 1, 7), (8, 2, 1, 3, 8, 10, 7), (6, 8, 3, 1, 4, 7), 3),&#10;            ([7] * 25, [6, 7] * 25, [7] * 25, 25),&#10;            ([7] * 25, [7] * 100, [5, 6] * 50, 0),&#10;            type here&#10;        ):&#10;            self.assertEqual(lcs3(first_sequence, second_sequence, third_sequence), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="lcs3_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="lcs3_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Amount of Gold&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Given a set of gold bars of various weights &#10;and a backpack that can hold at most $W$ pounds, &#10;place as much gold as possible into the backpack.&#10;&#10;**Constraints.** $1 \le W \le 10^4$. There are at most &#10;$10^3$ gold bars, the weight of each gold bar is at &#10;most $10^5$.&#10;&#10;&#10;&lt;div class='hint'&gt;&#10;A detailed solution for this programming challenge is covered in the &lt;a href=&quot;http://bit.ly/2MvJBF9&quot;&gt;companion MOOCBook&lt;/a&gt;. But we strongly encourage you to do your best to solve the challenge yourself before looking into the book! There are at least three good reasons for this.&#10;&lt;ul&gt;&#10;&lt;li&gt;By solving this challenge, you practice solving algorithmic problems similar to those given at technical interviews.&lt;/li&gt;&#10;&lt;li&gt;The satisfaction and self confidence that you get when passing the grader is priceless =)&lt;/li&gt;&#10;&lt;li&gt;Even if you fail to pass the grader yourself, the time will not be lost as you will better understand the solution from the book and better appreciate the beauty of the underlying ideas.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt; &#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="6" />
                      <option name="name" value="Maximum Amount of Gold" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from maximum_gold import maximum_gold&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;maximum_gold_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for capacity, weights, answer in (&#10;            (10, (1, 4, 8), 9),&#10;            (20, (5, 7, 12, 18), 19),&#10;            (10, (3, 5, 3, 3, 5), 10),&#10;            (10, (3, 5, 3, 3, 5), 10),&#10;            (500, (342, 381, 230, 381, 206, 393, 364, 319, 279, 385, 345, 263, 365, 281, 298, 247, 239, 201, 378, 351), 499)&#10;    ):&#10;        if maximum_gold(capacity, weights) != answer:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for capacity={}, weights={}&quot;.format(capacity, weights))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_gold.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="204" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="204" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="maximum_gold.py" />
                                <option name="text" value="# python3&#10;&#10;from sys import stdin&#10;&#10;&#10;def maximum_gold(capacity, weights):&#10;    assert 1 &lt;= capacity &lt;= 10 ** 4&#10;    assert 1 &lt;= len(weights) &lt;= 10 ** 3&#10;    assert all(1 &lt;= w &lt;= 10 ** 5 for w in weights)&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_capacity, n, *input_weights = list(map(int, stdin.read().split()))&#10;    assert len(input_weights) == n&#10;&#10;    print(maximum_gold(input_capacity, input_weights))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_gold_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="278" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="278" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="maximum_gold_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from maximum_gold import maximum_gold&#10;&#10;&#10;class MaximumGold(unittest.TestCase):&#10;    def test(self):&#10;        for capacity, weights, answer in (&#10;            (10, (1, 4, 8), 9),&#10;            (20, (5, 7, 12, 18), 19),&#10;            (10, (3, 5, 3, 3, 5), 10),&#10;            type here&#10;        ):&#10;            self.assertEqual(maximum_gold(capacity, weights), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_gold_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_gold_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Partitioning Souvenirs&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;You and two of your friends have just returned back home after visiting various countries. Now you would like to evenly split all the souvenirs that all three of you bought.&#10;&#10;**Input.** A sequence of integers $v_1, v_2, \dotsc, v_n$.&#10;&#10;**Output.** Output 1, if it is possible to partition them into three subsets with equal sums. &#10;Output 0 otherwise.&#10;&#10;**Constrains.** $1 \le n \le 20$, $1 \le v_i \le 30$ for all $i$.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="7" />
                      <option name="name" value="Partitioning Souvenirs" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from partition_souvenirs import partition3&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;partition_souvenirs_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for values, answer in (&#10;        ((20, ), 0),&#10;        ((7, 7, 7), 1),&#10;        ((3, 3, 3), 1),&#10;        ((3, 3, 3, 3), 0),&#10;        ((1, 2, 3, 4, 5, 5, 7, 7, 8, 10, 12, 19, 25), 1),&#10;        ([1]*10, 0),&#10;        ([1]*12, 1),&#10;        ([30] * 20, 0),&#10;        ([30] * 18, 1),&#10;    ):&#10;        if partition3(values) != answer:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for values={}&quot;.format(values))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="partition_souvenirs_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="282" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="282" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="partition_souvenirs_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from partition_souvenirs import partition3&#10;&#10;&#10;class PartitionSouvenirs(unittest.TestCase):&#10;    def test(self):&#10;        for values, answer in (&#10;            ((20, ), 0),&#10;            ((7, 7, 7), 1),&#10;            ((3, 3, 3), 1),&#10;            ((3, 3, 3, 3), 0),&#10;            type here&#10;        ):&#10;            self.assertEqual(partition3(values), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="partition_souvenirs.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="173" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="173" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="partition_souvenirs.py" />
                                <option name="text" value="# python3&#10;&#10;from itertools import product&#10;from sys import stdin&#10;&#10;&#10;def partition3(values):&#10;    assert 1 &lt;= len(values) &lt;= 20&#10;    assert all(1 &lt;= v &lt;= 30 for v in values)&#10;&#10;    type here&#10;&#10;&#10;if __name__ == '__main__':&#10;    input_n, *input_values = list(map(int, stdin.read().split()))&#10;    assert input_n == len(input_values)&#10;    print(partition3(input_values))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="partition_souvenirs_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="partition_souvenirs_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Maximum Value of an Arithmetic Expression&#10;&#10;&lt;center&gt;&lt;img src=&quot;logo.png&quot; height=&quot;200px&quot;&gt;&lt;/center&gt;&#10;&#10;Parenthesize an arithmetic expression to maxi- mize its value.&#10;&#10;**Input.** A string $s=s_0s_1\dotsb s_{2n}$ of length at most 29. &#10;Each symbol at an even position of $s$ is a digit &#10;(that is, an integer from 0 to 9) &#10;while each symbol at an odd position &#10;is one of three operations from {$+$,$-$,$*$}.&#10;&#10;**Output.** The maximum value of the given &#10;arithmetic expression among all possible &#10;orders of applying arithmetic operations.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="0" />
                      <option name="index" value="8" />
                      <option name="name" value="Maximum Value of an Arithmetic Expression" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="logo.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="logo.png" />
                                <option name="text" value="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" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from test_helper import run_common_tests, failed, passed, check_tests_pass&#10;from arithmetic_expression import find_maximum_value&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    check_tests_pass(&quot;arithmetic_expression_unit_tests.py&quot;)&#10;&#10;    all_tests_passed = True&#10;&#10;    for s, answer in (&#10;        (&quot;5&quot;, 5),&#10;        (&quot;2+3&quot;, 5),&#10;        (&quot;2-3&quot;, -1),&#10;        (&quot;5-8+7*4-8+9&quot;, 200),&#10;        (&quot;2-3&quot;, -1),&#10;        (&quot;9*9*9*9&quot;, 9 * 9 * 9 * 9),&#10;        (&quot;1-1&quot;, 0),&#10;        (&quot;7&quot;, 7),&#10;        (&quot;1+2+3+4+5+6+7+8+9&quot;, 45),&#10;    ):&#10;        if find_maximum_value(s) != answer:&#10;            all_tests_passed = False&#10;            failed(&quot;Wrong answer for {}&quot;.format(s))&#10;            break&#10;&#10;    if all_tests_passed:&#10;        passed()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="arithmetic_expression_unit_tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="282" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="282" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="arithmetic_expression_unit_tests.py" />
                                <option name="text" value="import unittest&#10;from arithmetic_expression import find_maximum_value&#10;&#10;&#10;class ArithmeticExpression(unittest.TestCase):&#10;    def test(self):&#10;        for s, answer in (&#10;            (&quot;5&quot;, 5),&#10;            (&quot;2+3&quot;, 5),&#10;            (&quot;2-3&quot;, -1),&#10;            (&quot;5-8+7*4-8+9&quot;, 200),&#10;            type here&#10;        ):&#10;            self.assertEqual(find_maximum_value(s), answer)&#10;&#10;&#10;if __name__ == '__main__':&#10;    unittest.main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="arithmetic_expression.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="85" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="85" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type here" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="arithmetic_expression.py" />
                                <option name="text" value="# python3&#10;&#10;&#10;def find_maximum_value(dataset):&#10;    assert 1 &lt;= len(dataset) &lt;= 29&#10;&#10;    type here&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(find_maximum_value(input()))&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="maximum_expression_opt.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="maximum_expression_opt.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </CourseraCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>